<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Side Project on Kuhung&#39;s Blog</title>
    <link>https://kuhungio.me/categories/side-project/</link>
    <description>Recent content in Side Project on Kuhung&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 20 Dec 2020 10:57:25 +0800</lastBuildDate>
    
	<atom:link href="https://kuhungio.me/categories/side-project/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>【手动置顶】文章发布计划</title>
      <link>https://kuhungio.me/2020/article-publishing-plan/</link>
      <pubDate>Sun, 20 Dec 2020 10:57:25 +0800</pubDate>
      
      <guid>https://kuhungio.me/2020/article-publishing-plan/</guid>
      <description>描述 预计耗时 预计发布 实际发布 最后一次修改     文章发布计划 / / 2020.12.12 2020.12.20     背景 拟定此文的目的，是为了自我监督文章的产出。防止眼高手低，坛子做枕头——空想。
事实上，脑子里想发的文章，远多于读者所看到的。因而，如何保证其“流水线”式的生产，显得尤为重要。
这条在商业中应用广泛：稳定的商业模式，除了可盈利外，另一项便是保证批量化、工业化生产，以期带来持续性的收益。
虽说文章这种东西，说是流水线的结果，有降低其逼格的嫌疑。但其实，每篇文章的写作，都能提炼出以下 PDCA 流程：
广泛阅读/社交互动察觉 确定立意 收集资料/代码 构建思维导图，确定大纲 内容填充 反复阅读，修改表达 内容多平台发布 反馈收集：曝光、点击、点赞、收藏、评论等 几个月后重读，修改再发布（个人网站）  因而，如果能有效的拆分目标，将会是稳定输出的一大保证。
 排期计划    文章代号 耗时预估 计划发布 实际发布 优先级 备注     游戏机制设计 6h 2020.12.13  ⭐⭐⭐ 游戏可玩性的来源   高绩效教练    ⭐ 12.14 思维导图开始制作   机器学习的可解释性    ⭐⭐ shap 归因等第一份先做可解释归因后续是不同模型的可解释性   稀缺资源的分配    ⭐ 防守完备策略   股市真规则    ⭐ 防止瞎买😂督促形成自己的交易原则   技术领导之路01（上） / / 2020.</description>
    </item>
    
    <item>
      <title>技术领导者之路 | 01 技术管理入门 （上）</title>
      <link>https://kuhungio.me/2020/management-101-vol-1/</link>
      <pubDate>Sat, 19 Dec 2020 15:32:37 +0800</pubDate>
      
      <guid>https://kuhungio.me/2020/management-101-vol-1/</guid>
      <description>描述 预计耗时 预计发布 实际发布 最后一次修改     翻译作品，技术领导之路的第一章 / / 2020.12.19 2020.12.19     管理的秘诀就在于：让那些讨厌你的人，远离那些还没有形成主见的人。 ——卡西·史丹格尔
 你阅读这本书，是因为你想成为一个好的管理者。但在这之前，你其实并不知道，一个好的管理者是什么样子。
你之前有遇到过一位好的经理吗？如果一个人让你告诉他，你想从一位好经理身上获得什么，你能够回答这个问题吗？
从管理者那里，期望获得什么 每个人在管理之路的第一站，总是在桌子的另一边，即：被管理者。这些被管理的经历，成了你构建自己管理哲学的基础。
不幸的是，我已经看到很多人，在他们的职业生涯中，并从未遇见过一位好的领导。
好的管理特质 散养（benign neglect）——这是我的朋友谈论他们遇到的，最好的管理者的特质时，常常会提到一个词。
工程师知道他们该做什么，领导则完全放权给他们做。在一个极端的案例里，一个人在六个月的项目时间里，仅仅同他的领导会面了两次。其中一次还是因为获得提拔。
良性的忽视（散养）并没有那么糟糕，特别是当你看到它的反面的时候。
散养的反面之一 这里有另外一种领导，当你需要帮助的时候，他会无视你：不顾你的疑惑，同时避免与你会谈。
更甚至，他们从来不给你反馈。只有当绩效回顾到来时，他才会告诉突然地告诉你：你并不胜任这份工作，或者是并不值得被提拔。
散养的反面二 而另一方面，又会有另外一种：极端的、事无巨细的管理方式。
他总是过问每件事的细节，并拒绝让你做任何的决策。他们会无视你的建议。只有当他们想找人背锅时，才会找上门来。
散养没那么糟糕 遗憾的是：以上反面类型的管理者，总是存在于各大公司的角落，影响着团队的精神健康。
所以，当你看见了以上的案例，你会意识到：散养，也没那么糟糕。
理想的管理者 与此同时，也有其他的类型的管理者：他们把你当成一个真正的人，并乐意帮助你成长。
  他们会教你一些重要的技能技巧，给你有价值的反馈。
  会帮你分析目前的困境，在困难中给你指引。帮助你弄清楚，哪些东西需要学习。
  会想着某一天，你能胜任他们的工作。
  总结起来一句话：他们帮助你明白，什么是需要重点关注的；同时，让你具备关注的能力。
但话说回来，为了你和你的团队走上正轨，管理者的关注点在方方面面。所以，指望他们事无巨细皆满足，也是不现实的。
在谈论想获得什么时，也应该问问自己：你想要的是什么。
一对一谈话 同你的直属领导，进行一对一的谈话是非常重要的。这有助于构造一个好的工作氛围。
然而，很多管理者忽视了这些会谈，或者他感觉是在浪费你的时间。
一对一谈话是为了两个目的。
一对一谈话目的之一 其一，它创造了你同你领导的联结。
这并不意味着：你花大把的时间，去谈论你的兴趣爱好、或者是周末的活动。而是让你的管理者进入你的生活。
这非常重要的。因为当有压力的事情发生时，比如：家人的去世，新生命的诞生或者是房屋修缮，会更容易请假。
你需要更多的帮助时，也会更加容易。
好的领导者，会注意到你的精神面貌的变化，并且希望能够真诚地帮助到你。
虽然我们可能是很内向，或者我们根本不想在工作中交朋友。你可能会认为，我是一个很喜欢交朋友的人，所以我不能理解你的感受。但是我向你保证，我能理解你坐在桌子的另一端的感受。</description>
    </item>
    
    <item>
      <title>为度过原神长草期，我写了个原神放置类单机小游戏</title>
      <link>https://kuhungio.me/2020/yuanshen-idle-feedback/</link>
      <pubDate>Mon, 16 Nov 2020 00:37:39 +0800</pubDate>
      
      <guid>https://kuhungio.me/2020/yuanshen-idle-feedback/</guid>
      <description>游戏地址：https://kuhungio.me/yuanshen-idle/
很高兴能和大家分享这款小游戏。如果恰好你也喜欢原神这款游戏，想在长草期放松放松，那么这款放置类游戏一定不要错过。
游戏模板来源于 Couy69 的 vue-idle-game，副本填充内容来自原神米游社等公开社区。所有内容均来自公开互联网，业余时间打造，非内鬼，不py。
对这款放置挂类游戏的任何建议，欢迎通过以下三种方式联系。
 拥有 GitHub 账号，可直接下方留言。 关注我万年不发一条的微信公众号【谷粒说数】，留言反馈。 发送电子邮件至 kuhung#foxmail.com(@替换#)，进行反馈。  请选择你最方便的形式。
为答谢各位的支持，将于12月1号，送出三份原神周边。抽取三位提出宝贵建议的同学，快递上门。
另寻前端高手，优化移动端布局，以及迭代整体交互逻辑。
目前的更新计划：
   项目 预计耗时 预期上线时间 实际上线时间 备注 最后一次修改时间     原神放置类小游戏 7x10h 已上线 2020.11 项目整体概况 2020.12.10   完成全部副本的文字描述替换 4h 2020.12.13  1116 完成蒙德区副本文字描述 2020.11.16   增加新手引导 1h 已上线 2020.11 增加文字描述引导 2020.11.19   调整增益道具UI        增加道具洗练，将摩拉进行消耗        调整暴击逻辑，增加随机性          游戏 Tip：</description>
    </item>
    
    <item>
      <title>自制以图搜图引擎，居家学习必备</title>
      <link>https://kuhungio.me/2020/simple-image-search/</link>
      <pubDate>Mon, 13 Apr 2020 21:17:08 +0800</pubDate>
      
      <guid>https://kuhungio.me/2020/simple-image-search/</guid>
      <description>最近宅在家，消遣时间之际，总会遇到一个让我困扰的事情。比如随手刷到的一个GIF，总想找到它的原片。
各位绅士可别想歪，我说的是动漫。
这个问题本质是一个相似度的检索问题。
说到视频找视频，其实可以分解为以图搜图。以图搜图这项技术，已经十分成熟，且已产品化。尤其在主流搜索引擎，很难找到一个不能搜图的引擎。连淘宝都有自己的时尚搜图功能。
但是当你满怀期待上传一张图时，你会发现，他返回的结果要么是同风格作品，要么是图片的描述。摔，我不是让你做抽象阅读理解哇。
这样的现象，实际是个性化需求与规模化需求的矛盾。对于公司，能规模化的，成本越低；定制带来存储成本，远高于能带来的回报。
这样的问题难不倒我们广大的人民群众，如果没有现成的，那我们就造一个。
 以图搜图，可以理解为图像的检索，图像和其它信息一样，是可以被索引，被检索的。
于是乎，可以将整个工程抽象为3个部分。
 图像预处理 图像特征表征 图像检索  图像预处理，一般是尺寸、色调的调整、以及去除明显的噪声。
索引建立有很多种方法，其核心是构造图像的特征表征。
这里先用简单的，构建一个 MVP（最小可行性产品），就采用谷歌的 MobileNet 啦。
该模型尺寸仅数十M，放在服务器或是部署到手机移动端，完全绰绰有余。（实不相瞒，其实一开始上的VGG16，但是模型太大了，服务器放不下。）
最后，图像检索，当一张新图来到时，对其进行特征提取，然后去索引库中查询，返回特征表征最近的 TopN，一个简单的以图搜图就完成了。
 迫不及待想尝试了，但是发现一个大问题，咱们的索引图从哪儿来？总不能凭空捏造噻。
嗯，这也不是什么大问题，之前浏览某P开头，哦不对是G开头的学习网站，发现了知乎问题的爬虫。
这可是个好东西，恰好知乎时间线上，总有一个问题干扰学习——#什么样的腿才叫好看的腿#
就拿这个问题为例，将图片在离线创建索引，随后通过服务端部署。（服务端部署也可以讲一集，但不在这里，别挡住我看腿。）
当当当，随着周末两天的操作，舍弃了俺在的 pubg mobile 战友，谷粒粒的第一个搜图app上线咯。喜大普奔。
让我们赶紧试试，
嗯，还不错
再来一张，
原图秒匹配好吗，还给配上了类似风格的照片。
到这里，咱们的以图搜图小应用，就算开发上线完毕啦。
学习效率上升N个档次有没有⬆
链接地址：以图搜图之#什么样的腿才叫好看的腿# http://img-search.kuhungio.cn/
相关文章：
谷粒：机器学习模型部署&amp;ndash;打通前后端任督二脉
谷粒：机器学习落地需攻破的9个难题
声明：该应用仅供学习，禁止用于其它用途。</description>
    </item>
    
    <item>
      <title>机器学习系统设计 Machine learning system design</title>
      <link>https://kuhungio.me/2019/machine_learning_system_design/</link>
      <pubDate>Sun, 01 Dec 2019 18:26:43 +0800</pubDate>
      
      <guid>https://kuhungio.me/2019/machine_learning_system_design/</guid>
      <description>导读 Web app：https://kuhungio.me/machine-learning-systems-design/
 机器学习系统设计 系统设计题，顾名思义，就是考察一个人设计系统的能力。它是一种国外很喜欢的题型，特别是中高级职位，在算法手撕结束后，一般就是系统设计题。
国外的算法工程师，被称之为 Machine Learning Engineer。国内的名头比较多，算法工程师、数据挖掘工程师、机器学习工程师、深度学习工程师都指的这个。
这一岗位同开发岗位，SDE 一样，也需要足够的系统设计经验。
国外的大佬 github.com/chiphuyen 总结了一份机器学习设计的资料，我在这里做本地化整理，同时增加一些自己的从业体会。
内容分为3个部分，分别是：
  机器学习的系统设计部分，这里做了核心概念的摘录；
  系统设计的案例，由于众所周知的原因，很多文章看不了，我这里将其整理放入了 github，同时笔记标注版的放在了公众号：谷粒说数。
  练习部分，作者列了27道系统设计题。我这里将其布置在了网页上，方便自查，后续会上评论进行答案收集。
  系统设计应关注的点 系统设计题，如果没有完整的方案也没关系，主要看表现的思想，着重从以下三个方面考察：
  项目有哪些约束条件，哪些能做，哪些不能做。
  方案的利弊，选择方案时，思考方案利弊的过程。
  主要的功能，最后达成什么样的效果。
  系统设计往往很难，这是因为两方面的原因。1. 缺乏有效的评估手段。2. 问题往往模棱两可。面试中的理想候选人应该是这样子的：1. 能够有效的拆解问题，将复杂问题简单化。2. 能够区分该场景是否需要机器学习方案。第二点很重要，因为在当下，受媒体大环境影响，很多人会选择无脑上机器学习，殊不知某些场景简单的方法更有效。
 Machine learning methods change every year, solving problems stays the same.
 生产环境不同于学术环境 学术研究的一般有以下两个特点：
 想法设法比上一代模型效果更好，而不用思考怎么落地使用它。 由于效果是第一要务，所以算力没有限制，加钱堆机器即可。  而生产环境不同，它的特点如下：
 效果并非越好才好 算力资源常常有限  作为开发者，要始终牢记生产环境是我们的目标。</description>
    </item>
    
    <item>
      <title>机器学习建模与部署--以垃圾消息识别为例</title>
      <link>https://kuhungio.me/2019/flask_vue_ml/</link>
      <pubDate>Sat, 20 Apr 2019 14:31:26 +0800</pubDate>
      
      <guid>https://kuhungio.me/2019/flask_vue_ml/</guid>
      <description>前言 学历与定位 近日在某论坛，有网友提问道：搞机器学习是不是要博士或是硕士学历，是不是要求很高，顶会论文？本科生或者更低学历的，是不是就没有机会了？从最近公司的招聘来看，算法工程师的 bar 确实有在提高。但在某些事业部，仍需要很大的人力来做落地场景。每个人都要找准自己的定位，公司也有它的部门定位。
如果是发论文、要在学术界站稳脚跟，给投资人“我们很重视最新技术”的信心，那博士确实很重要。另一个角度，从实用角度来说，研究生和本科生可能性价比更高。当然，作为一个本科就业的人，如果没有较为丰富的实战经验；有机会的话，还是拿到硕士及更高学历比较好。这里的实战经验就比如：搭建一个完整的、涉及算法模型、后端及前端的系统。
模型算法的实用主义 机器学习的实用主义，不是在论文多少，而是用正确的方法去解决正确的问题。而作为背后的工程师，除了调参、除了写 sql，做调包侠、做 sql boy、报表 boy 以外，在之前的文章也提到过，要学会做正确的展示，做全套的工程化实施。毕竟，等排期很难受；有些情况前后端资源不够，或者优先级很低，那就需要自己动手了。以下以上面的垃圾邮件分类为例子，说明该如何搭建一个前后端完整的机器学习系统。
这里将本次的任务拆解，分为三个部分来讲。后端 flask、前端 Vue、ML 模型采用 flair，项目地址 kuhung/flask_vue_ML
后端 flask 相关依赖的安装 pip install -r requirements.txt
核心函数  导入函数包  from flask import Flask, jsonify, request from flask_cors import CORS # 做跨域的准备 from flask import session # 追踪客户端会话 from flair.models import TextClassifier # 模型导入，采用前不久开源的 flair 做文本分类 from flair.data import Sentence 准备工作  app = Flask(__name__) # 声明准备 app.secret_key = &amp;#34;super_secret_key&amp;#34; CORS(app) classifier = TextClassifier.</description>
    </item>
    
    <item>
      <title>GPT2 模型生成假正经文稿 Slack gpt2 Bot </title>
      <link>https://kuhungio.me/2019/slack-gpt2-bot/</link>
      <pubDate>Mon, 25 Mar 2019 22:36:06 +0800</pubDate>
      
      <guid>https://kuhungio.me/2019/slack-gpt2-bot/</guid>
      <description>slack app：slack workspace
 记得在校的时候，冰岩作坊做过一个app，讲接龙故事的。类似于我写一段，另一个人写接下来的一段，最后凑成一个完整的故事。当时，可产生了不少有意思的段子。最近，GPT2 模型的发布，让人不禁想到，有没有可能让机器来完成这个任务呢？机器写十四行诗、机器写莎士比亚风格的文章，机器写对联，这些都已经成为了现实。人工智能虽然没有带来突飞猛进的质变，但着实催生了很多有意思的小玩意儿。对于GPT2，一个字概括来说就是：壕——数据量大，算力能够 cover 住。这套算法模型网罗了几乎现有的所有文本数据，成功“过拟合“地屠榜，刷新多个 NLP 任务榜单排行。作者为了预防滥用模型、同时让别的研究者能够有个初步地认识，开源了一个小一些地模型。该模型的能力之一，就是我们今天的主题：接着别人地话写故事。今天我们要通过算法来实现。
虽然作者有在尽力简化复现难度，但对于很多不是这行的人，让他去敲命令行来走完整个流程，还是困难重重。能够将深奥的原理讲给普通人听，并且简单易懂，是一项科学传播的必备能力。做为技术向的工程师，在产品处于雏形阶段时，能够通过一个 MVP 最小价值产品，实现核心功能，也是一项大大的加分项。对于今天的任务，我们选取容易上手，接口丰富的 slack 作为我们的前端交互窗口。
如何构建一个 MVP 产品；或者具体的来讲，在我们的这个任务中，如何将数据挖掘工程师的模型成果，转化为可落地、可感知的产品或服务呢。操起斧子直接开干，依葫芦画瓢撸个前后端出来吗？这，其实是很多技术人员的一个误区——认为什么都可以从技术层面解决，”少废话别bb，bb is cheap，show me the code“。但从一个商业产品或服务商的角度来看，客户与渠道是前台，我们的客户是谁、如何触达客户以及选用何种渠道维系客户，是一个一开始就要考虑的事情。
以这个 GPT2 bot 为例，我希望的客户是对 GPT感兴趣，但又没基础去折腾的学生或是其他领域的人士，抑或是没时间去跑 demo 的专业同行。如何触达客户：你看的这篇文章的平台，就是我的触达媒介。我最后选择用 slack 交付我的服务，而不是 qq 或 微信，是因为他成本更低，虽然阻挡了部分潜在客户，但权衡后是可以接受的。最后的工作才是依葫芦画瓢，照撸一个出来。本文参照了EdwardHuCS,并在其基础上做了部分改动。
虽然这波 AI 热潮，让很多像我这样的非科班得以上车。但在实际生产环境中，我们还是暴露了诸多问题。其中之一，便是工程能力薄弱。会写 SQL 、会手推算法、会调包，但是就是不会写能跑的整个小系统。在业务变化快的公司中，这可能不是一个好事情。你的模型也许还在细调参数，但突然整个业务就没了。如果你能拿出一个能跑的马儿，兴许能影响这个业务。这就是前面提到的加分项。
言归正传，我们回到在slack上面。我们的核心就以下代码：
核心代码解读 导入一些基础配置
import os import time import re from slackclient import SlackClient import sys from gpt2.src import generate_unconditional_samples # instantiate Slackk client slack_client = SlackClient(&amp;#39;&amp;#39;) # 认证口令 # starterbot&amp;#39;s user ID in Slack: value is ssigned after the bot starts up starterbot_id = None 延迟配置以及样例和匹配模式</description>
    </item>
    
  </channel>
</rss>