<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kuhung&#39;s Blog on Kuhung&#39;s Blog</title>
    <link>http://kuhungio.me/</link>
    <description>Recent content in Kuhung&#39;s Blog on Kuhung&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 09 Jan 2019 00:14:04 +0800</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>About</title>
      <link>http://kuhungio.me/about/</link>
      <pubDate>Wed, 09 Jan 2019 00:14:04 +0800</pubDate>
      
      <guid>http://kuhungio.me/about/</guid>
      <description>

&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;笔名：谷粒&lt;/li&gt;
&lt;li&gt;英文名：kuhung&lt;/li&gt;
&lt;li&gt;毕业院校：华中科技大学&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;工作履历&#34;&gt;工作履历&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;2018.07~至今 网易游戏 数据挖掘工程师&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;研究方向&#34;&gt;研究方向&lt;/h2&gt;

&lt;p&gt;推动机器学习、深度学习等技术，落地于真实应用场景。成果导向，最大化技术的价值。&lt;/p&gt;

&lt;p&gt;关注以下内容：&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;机器视觉&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;目标检测&lt;/li&gt;
&lt;li&gt;图像描述&lt;/li&gt;
&lt;li&gt;图像分类&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;自然语言处理&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;情感分析&lt;/li&gt;
&lt;li&gt;文本检索&lt;/li&gt;
&lt;li&gt;聊天机器人&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;计算广告&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;推荐系统&lt;/li&gt;
&lt;li&gt;点击率预估&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;后端平台&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AutoML&lt;/li&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;过往成果&#34;&gt;过往成果&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;2018-08 | 第七届全国媒体技术处理大会 | 文本溯源技术测评 | &lt;sup&gt;5&lt;/sup&gt;&amp;frasl;&lt;sub&gt;95&lt;/sub&gt;&lt;/li&gt;
&lt;li&gt;2017-06 | Kaggle | Intel&amp;amp;MobileODTCervicalCancerScreening  | top10%&lt;/li&gt;
&lt;li&gt;2017-02 | DataCastle | 精准资助预测赛 | &lt;sup&gt;7&lt;/sup&gt;&amp;frasl;&lt;sub&gt;124&lt;/sub&gt;&lt;/li&gt;
&lt;li&gt;2016-12 | 2016 BYTE CUP | 国际机器学习竞赛 | &lt;sup&gt;8&lt;/sup&gt;&amp;frasl;&lt;sub&gt;1029&lt;/sub&gt;&lt;/li&gt;
&lt;li&gt;2016-10 |  第五届全国社会媒体处理大会 | 用户画像技术测评 | &lt;sup&gt;5&lt;/sup&gt;&amp;frasl;&lt;sub&gt;373&lt;/sub&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;合作咨询&#34;&gt;合作咨询&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://files.slack.com/files-pri/T2ZE3LPB2-FFC3FHNP3/img_0218.jpg&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cats VS. Dogs 图像分类之猫狗大战</title>
      <link>http://kuhungio.me/2016/%E7%8C%AB%E7%8B%97%E5%A4%A7%E6%88%98/</link>
      <pubDate>Wed, 06 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>http://kuhungio.me/2016/%E7%8C%AB%E7%8B%97%E5%A4%A7%E6%88%98/</guid>
      <description>

&lt;p&gt;我是参加DataCastle猫狗大战的选手，kuhung。在测评中，我提交的数据集最后评分0.98639。以下是我的备战过程及心得体会。（最后有完整代码及较全面的注释）&lt;/p&gt;

&lt;h2 id=&#34;个人介绍&#34;&gt;个人介绍&lt;/h2&gt;

&lt;p&gt;华中科技大学机械学院的大二（准大三）学生，接触数据挖掘快有一年了。早期在学生团队做过一些D3数据可视化方面的工作，今年上半年开始数据挖掘实践。想把这个爱好发展成事业。做过阿里的天池竞赛，也有在kaggle混迹。算个数据新手，但一直不承认：你是新人，所以成绩不好看没啥关系。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&#34;初识比赛&#34;&gt;初识比赛&lt;/h2&gt;

&lt;p&gt;第一次接触数据集，就感觉有些难度。因为以前没做过图片分类的比赛，更没想过要用深度学习的神经网络进行识别。思索一番，还是觉得特征提取后，使用决策树靠谱。自己也下去找过资料，发现并不容易实现。期间，还曾一度想过肉眼识别。但打开文件，看到那1400+图片，就觉得这时间花在肉眼识别上不值。中间一度消停。&lt;/p&gt;

&lt;h2 id=&#34;初见曙光-yinjh战队分享&#34;&gt;初见曙光——yinjh战队分享&lt;/h2&gt;

&lt;p&gt;后来上论坛逛过几次。一次偶然的机会，让我看到了yinjh团队分享的vgg16模型。乍一看，代码简单、效果不错。更为重要的是，这个模型自己以前从未见过。于是抱着验证学习的态度，我把代码扣了下来，打算自己照着做一遍。&lt;/p&gt;

&lt;h2 id=&#34;过程艰难&#34;&gt;过程艰难&lt;/h2&gt;

&lt;p&gt;一开始，我就把一屏的代码放进了我的jupyter notebook中，一步一步试水。很明显，我的很多依赖包都没安装，所以也是错误不断。早先是在Windows系统下，使用python2.7，需要什么包，就安装什么包。在安装keras过程中，我发现了Anaconda——很好用的一个科学计算环境，集成了各种数据挖掘包。即使是这样，仍然是满屏的错误，亟待排查。&lt;/p&gt;

&lt;h2 id=&#34;步步优化&#34;&gt;步步优化&lt;/h2&gt;

&lt;p&gt;离比赛截止就还只有几天，一边准备期末考试，一边焦急地排查bug。Windows系统下仍有个别难以解决的错误，我索性切换到了做NAO机器人时装的Ubuntu系统下。结合keras给的官方文档，我对原代码进行了函数拆分解耦，又在循环体部分增加了异常检测。综合考虑性能，稍微修改了循环结构。下载好训练的vgg16_weights，在没有错误之后，焦急地等待25分钟后，屏幕开始打印结果。&lt;/p&gt;

&lt;h2 id=&#34;欣喜万分&#34;&gt;欣喜万分&lt;/h2&gt;

&lt;p&gt;第一次提交，随便截取了前面一段，没成绩。折腾了几次，才发现是提交的格式出了问题。后面取p=0.99+部分，提交结果在0.58左右，数据集大概有90个。估计了下，狗狗总数应该在180左右。第二次提交，取了180左右，结果0.97多一点。第三次，也是最后一次提交，取了result前189个，结果0.98639，一举升到第一。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;比赛总结&#34;&gt;比赛总结&lt;/h3&gt;

&lt;p&gt;这次比赛，首先还得感谢yinjh团队的yin前辈。如果没有您分享的代码，就不会有我今天的成绩。感谢您分享的代码，感想您在我写这篇分享时提供的代码指导。
再者，感谢我的女票晶晶，谢谢你一直陪在我身边，谢谢你包容我写代码时不那么快的回复手速。我是新手，但我一直不觉得成绩低是理所当。立志从事这一行，就需要快速地学习、快速地成长。新人，也需要做到最好。当然，自己目前还存在很多问题。一些基本的概念只是模糊掌握，需要更多的实践，需要更多的理论积淀，而不是简单地做一个调包侠。&lt;/p&gt;

&lt;h3 id=&#34;给新手的建议&#34;&gt;给新手的建议&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;善用搜索引擎，多读官方文档，不要一开始就依赖Google。&lt;/li&gt;
&lt;li&gt;Google Groups、Stack Overflow、GitHub是好东西。&lt;/li&gt;
&lt;li&gt;干！就是干！&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;完整代码&#34;&gt;完整代码&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;以下操作均在Ubuntu14.04+Anaconda中进行&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;导入python标准包&#34;&gt;导入python标准包&lt;/h3&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import os   # 处理字符串路径
import glob  # 用于查找文件
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;导入相关库&#34;&gt;导入相关库&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;keras&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;keras是基于Theano的深度学习(Deep Learning)框架&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;详细信息请见&lt;a href=&#34;http://keras.io/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;keras官方文档&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;安装过程&#34;&gt;安装过程&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;conda update conda&lt;/p&gt;

&lt;p&gt;conda update &amp;ndash;all&lt;/p&gt;

&lt;p&gt;conda install mingw libpython&lt;/p&gt;

&lt;p&gt;pip install git+git://github.com/Theano/Theano.git&lt;/p&gt;

&lt;p&gt;pip install git+git://github.com/fchollet/keras.git&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;cv2&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;OpenCV库&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;conda isntall opnecv&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;numpy&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Anaconda自带&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from keras.models import Sequential
from keras.layers.core import Flatten, Dense, Dropout
from keras.layers.convolutional import Convolution2D, MaxPooling2D, ZeroPadding2D
from keras.optimizers import SGD
import cv2, numpy as np
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;使用keras建立vgg16模型&#34;&gt;使用keras建立vgg16模型&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;参考官方示例&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def VGG_16(weights_path=None):
    model = Sequential()
    model.add(ZeroPadding2D((1,1),input_shape=(3,224,224)))
    model.add(Convolution2D(64, 3, 3, activation=&#39;relu&#39;))
    model.add(ZeroPadding2D((1,1)))
    model.add(Convolution2D(64, 3, 3, activation=&#39;relu&#39;))
    model.add(MaxPooling2D((2,2), strides=(2,2)))

    model.add(ZeroPadding2D((1,1)))
    model.add(Convolution2D(128, 3, 3, activation=&#39;relu&#39;))
    model.add(ZeroPadding2D((1,1)))
    model.add(Convolution2D(128, 3, 3, activation=&#39;relu&#39;))
    model.add(MaxPooling2D((2,2), strides=(2,2)))

    model.add(ZeroPadding2D((1,1)))
    model.add(Convolution2D(256, 3, 3, activation=&#39;relu&#39;))
    model.add(ZeroPadding2D((1,1)))
    model.add(Convolution2D(256, 3, 3, activation=&#39;relu&#39;))
    model.add(ZeroPadding2D((1,1)))
    model.add(Convolution2D(256, 3, 3, activation=&#39;relu&#39;))
    model.add(MaxPooling2D((2,2), strides=(2,2)))

    model.add(ZeroPadding2D((1,1)))
    model.add(Convolution2D(512, 3, 3, activation=&#39;relu&#39;))
    model.add(ZeroPadding2D((1,1)))
    model.add(Convolution2D(512, 3, 3, activation=&#39;relu&#39;))
    model.add(ZeroPadding2D((1,1)))
    model.add(Convolution2D(512, 3, 3, activation=&#39;relu&#39;))
    model.add(MaxPooling2D((2,2), strides=(2,2)))

    model.add(ZeroPadding2D((1,1)))
    model.add(Convolution2D(512, 3, 3, activation=&#39;relu&#39;))
    model.add(ZeroPadding2D((1,1)))
    model.add(Convolution2D(512, 3, 3, activation=&#39;relu&#39;))
    model.add(ZeroPadding2D((1,1)))
    model.add(Convolution2D(512, 3, 3, activation=&#39;relu&#39;))
    model.add(MaxPooling2D((2,2), strides=(2,2)))

    model.add(Flatten())
    model.add(Dense(4096, activation=&#39;relu&#39;))
    model.add(Dropout(0.5))
    model.add(Dense(4096, activation=&#39;relu&#39;))
    model.add(Dropout(0.5))
    model.add(Dense(1000, activation=&#39;softmax&#39;))

    if weights_path:
        model.load_weights(weights_path)

    return model
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;引入训练好的vgg16-weights模型&#34;&gt;引入训练好的vgg16_weights模型&lt;/h3&gt;

&lt;p&gt;**Note： **&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;vgg16_weights.h5需单独下载，并与代码文件处于同一文件夹下，否则会报错。

&lt;ul&gt;
&lt;li&gt;网上有资源 附百度云盘链接 &lt;a href=&#34;http://pan.baidu.com/s/1qX0CJSC&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;vgg16_weights.h5下载&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;model = VGG_16(&#39;vgg16_weights.h5&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sgd = SGD(lr=0.1, decay=1e-6, momentum=0.9, nesterov=True)
model.compile(optimizer=sgd, loss=&#39;categorical_crossentropy&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;猫和狗的特征&#34;&gt;猫和狗的特征&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dogs=[251, 268, 256, 253, 255, 254, 257, 159, 211, 210, 212, 214, 213, 216, 215, 219, 220, 221, 217, 218, 207, 209, 206, 205, 208, 193, 202, 194, 191, 204, 187, 203, 185, 192, 183, 199, 195, 181, 184, 201, 186, 200, 182, 188, 189, 190, 197, 196, 198, 179, 180, 177, 178, 175, 163, 174, 176, 160, 162, 161, 164, 168, 173, 170, 169, 165, 166, 167, 172, 171, 264, 263, 266, 265, 267, 262, 246, 242, 243, 248, 247, 229, 233, 234, 228, 231, 232, 230, 227, 226, 235, 225, 224, 223, 222, 236, 252, 237, 250, 249, 241, 239, 238, 240, 244, 245, 259, 261, 260, 258, 154, 153, 158, 152, 155, 151, 157, 156]
cats=[281,282,283,284,285,286,287]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;待处理文件导入&#34;&gt;待处理文件导入&lt;/h3&gt;

&lt;p&gt;**Note: **&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;将测试集改名为test，放入imgs文件夹下，imgs文件夹又与此代码处于同一文件夹下。&lt;/li&gt;
&lt;li&gt;当然，你也可以修改下面的路径。&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;path = os.path.join(&#39;imgs&#39;, &#39;test&#39;, &#39;*.jpg&#39;)  #拼接路径
files = glob.glob(path) #返回路径
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;定义几个变量&#34;&gt;定义几个变量&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;result=[]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;flbase=0
p=0
temp=0
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;定义图像加载函数&#34;&gt;定义图像加载函数&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def load_image(imageurl):
    im = cv2.resize(temp ,(224,224)).astype(np.float32)
    im[:,:,0] -= 103.939
    im[:,:,1] -= 116.779
    im[:,:,2] -= 123.68
    im = im.transpose((2,0,1))
    im = np.expand_dims(im,axis=0)
    return im    
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;定义预测函数&#34;&gt;定义预测函数&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def predict(url):
    im = load_image(url)        
    out = model.predict(im)
    flbase = os.path.basename(url)
    p = np.sum(out[0,dogs]) / (np.sum(out[0,dogs]) + np.sum(out[0,cats]))
    result.append((flbase,p))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;开始预测&#34;&gt;开始预测&lt;/h3&gt;

&lt;p&gt;**Note： **
- 此处的if,else异常检测很重要，因为cv2.imread(fl)在遇到某几张图时会为空，抛出错误，程序中途停止，图片集得不到完全检测。
- 一般配置电脑跑这部分时，大约需要20～30分钟，不是程序没有工作，请耐心等待。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for fl in files:
    temp=cv2.imread(fl) 
    if  temp ==None:  
        pass
    else:
        predict(fl)    
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;对结果进行排序&#34;&gt;对结果进行排序&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;result=sorted(result, key=lambda x:x[1], reverse=True)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;打印预测结果与相应概率&#34;&gt;打印预测结果与相应概率&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for x in result:
    print x[0],x[1]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;预测结果&#34;&gt;预测结果&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;根据上面的概率，选择相应的前多少张图片&lt;/li&gt;
&lt;li&gt;复制进csv文件，使用一般编辑器将&amp;rdquo;.jpg&amp;rdquo;以空格替代&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for x in result:
    print x[0]
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;此篇文章为原创，转载请注明出处。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>