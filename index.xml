<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kuhung&#39;s Blog on Kuhung&#39;s Blog</title>
    <link>https://kuhungio.me/</link>
    <description>Recent content in Kuhung&#39;s Blog on Kuhung&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 01 Apr 2019 19:28:32 +0800</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Hands On Machine Learning in Industry 一文看懂机器学习项目的完整生命周期</title>
      <link>https://kuhungio.me/2019/hands-on_machine_learning_in_industry/</link>
      <pubDate>Mon, 01 Apr 2019 19:28:32 +0800</pubDate>
      
      <guid>https://kuhungio.me/2019/hands-on_machine_learning_in_industry/</guid>
      <description>

&lt;p&gt;机器学习这东西，在学术界产出颇多，但在工业界，却很少落地。究其原因，是理念落地不够彻底，很多从业者和相关上下游不理解所致。这次就这这个机会，梳理下一个机器学习，从立项到落地再到结束，他的完整生命周期该是什么样子的。这里参考了《Hands-On Machine Learning with Scikit-Learn and Tensorflow》，值得一提的是这本书写的很不错，和《群体智慧编程》有一拼，建议阅读英文原著或东南大学出的影印版。&lt;/p&gt;

&lt;h1 id=&#34;机器学习项目的生命周期&#34;&gt;机器学习项目的生命周期&lt;/h1&gt;

&lt;ol class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;p&gt;问题定义&lt;/p&gt;

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 定义问题，并关注大局&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;数据处理&lt;/p&gt;

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 获取数据&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 探索性的数据分析&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 清洗数据，为接下来的模型做准备&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;模型方案&lt;/p&gt;

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 探索不同的模型并挑选合适的模型&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 对模型进行微调，并集成为更好的模型&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 解决方案呈现&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;部署维护&lt;/p&gt;

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 部署、监控并维护系统

&lt;br /&gt;&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;定义问题-从大局出发&#34;&gt;定义问题，从大局出发&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;和业务团队一起定义问题目标&lt;/li&gt;
&lt;li&gt;我们的解决方案将会如何发挥作用&lt;/li&gt;
&lt;li&gt;现在的解决方案是什么样的（如果有）&lt;/li&gt;
&lt;li&gt;你将如何定义这个问题（有监督、无监督，在线还是离线）&lt;/li&gt;
&lt;li&gt;结果该如何衡量&lt;/li&gt;
&lt;li&gt;衡量方法是否和商业目标一致&lt;/li&gt;
&lt;li&gt;要达成这一目标，至少的表现该是什么样子的&lt;/li&gt;
&lt;li&gt;类似的问题是什么？有无可复用的经验与工具&lt;/li&gt;
&lt;li&gt;我们有专家知识吗&lt;/li&gt;
&lt;li&gt;你将如何着手解决这个问题&lt;/li&gt;
&lt;li&gt;列出你或者别人目前所作的努力&lt;/li&gt;
&lt;li&gt;如果可能，对假说进行验证&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;获取数据&#34;&gt;获取数据&lt;/h2&gt;

&lt;p&gt;建议：尽量自动化以更容易地方式获取最新的数据&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;列出你所需的数据以及体量&lt;/li&gt;
&lt;li&gt;找寻并记录下获取数据的方式&lt;/li&gt;
&lt;li&gt;检查数据将占据多少空间&lt;/li&gt;
&lt;li&gt;检查是否有法律风险，如有必要请获得许可&lt;/li&gt;
&lt;li&gt;获取许可&lt;/li&gt;
&lt;li&gt;创建工作空间，确保存储足够大&lt;/li&gt;
&lt;li&gt;获取数据&lt;/li&gt;
&lt;li&gt;转换数据的格式以便能够方便操作（不需要改变数据本身）&lt;/li&gt;
&lt;li&gt;确保敏感信息被删除或保护加密（匿名）&lt;/li&gt;
&lt;li&gt;检查数据的大小和类型（时间序列、采样、地理信息等）&lt;/li&gt;
&lt;li&gt;划分测试集，把他放一边，并且不再去动他（防止数据泄露）&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;探索数据&#34;&gt;探索数据&lt;/h2&gt;

&lt;p&gt;建议：在该阶段尽量获取领域专家的意见&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;创建数据的副本以便做数据探索（如果数据量太大，做降采样处理）&lt;/li&gt;
&lt;li&gt;创建 Jupyter notebook 以便保存探索记录&lt;/li&gt;
&lt;li&gt;研究每个属性及其特征

&lt;ul&gt;
&lt;li&gt;名称&lt;/li&gt;
&lt;li&gt;类型（类别，整型/浮点，有无上下界，文本，结构化等）&lt;/li&gt;
&lt;li&gt;缺失值&lt;/li&gt;
&lt;li&gt;噪声数据（随机数，异常值，四舍五入的误差）&lt;/li&gt;
&lt;li&gt;对本任务可能有用的数据&lt;/li&gt;
&lt;li&gt;分布类型（高斯分布，均匀分布，指数分布）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;对于有监督问题：确定目标对象&lt;/li&gt;
&lt;li&gt;可视化数据&lt;/li&gt;
&lt;li&gt;研究变量间的相关性&lt;/li&gt;
&lt;li&gt;研究你将如何着手解决此问题&lt;/li&gt;
&lt;li&gt;确认比较有希望的解决方案&lt;/li&gt;
&lt;li&gt;确认有用的外部数据&lt;/li&gt;
&lt;li&gt;将以上信息存档记录下来&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;准备数据&#34;&gt;准备数据&lt;/h2&gt;

&lt;p&gt;建议：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;在数据的副本上操作（保持原始数据不被影响）&lt;/li&gt;
&lt;li&gt;将你所作的数据变换写成函数，有以下5个原因

&lt;ul&gt;
&lt;li&gt;便于在本项目的新数据上复用&lt;/li&gt;
&lt;li&gt;便于在别的项目中复用&lt;/li&gt;
&lt;li&gt;快速清洗和准备测试集&lt;/li&gt;
&lt;li&gt;在立项后，能够及时对数据进行处理&lt;/li&gt;
&lt;li&gt;让数据变换过程也能作为超参数的一份子，进行调参&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;数据清洗

&lt;ul&gt;
&lt;li&gt;调整或移除异常值（可选）&lt;/li&gt;
&lt;li&gt;填补缺失值（0，平均数、中位数），或者简单的去掉缺失的样本或特征&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;特征选择（可选）

&lt;ul&gt;
&lt;li&gt;去掉对本任务无用的信息&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;特征工程，适度

&lt;ul&gt;
&lt;li&gt;连续数值离散化&lt;/li&gt;
&lt;li&gt;特征分解（分类特征、时间特征等）&lt;/li&gt;
&lt;li&gt;特征变换（log(x),sqrt(x),x^2等）&lt;/li&gt;
&lt;li&gt;特征组合&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;特征尺度变换：标准化或归一化&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;挑选合适的模型&#34;&gt;挑选合适的模型&lt;/h2&gt;

&lt;p&gt;建议：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;如果数据很大，做降采样，以便能够在合理时间内尝试多个模型（不过要注意，这样的操作对于复杂模型不太友好，比如神经网络和随机森林）&lt;/li&gt;
&lt;li&gt;再一次的，尽量自动化以上流程&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;训练很多模型，快且原始地使用模型参数，训练尽可能多的模型（线性模型、朴素贝叶斯、SVM、随机森林、神经网络等等）&lt;/li&gt;
&lt;li&gt;测量并评估他们的表现

&lt;ul&gt;
&lt;li&gt;对于每个模型，使用 N-fold 交叉验证，计算表现的均值与方差&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;分析每个模型上最为显著的特征&lt;/li&gt;
&lt;li&gt;分析模型所犯的错误类型

&lt;ul&gt;
&lt;li&gt;如果是人类，会采用什么样的方法避免犯错？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;快速地做一波特征选择和特征工程&lt;/li&gt;
&lt;li&gt;前面步骤重复一两次&lt;/li&gt;
&lt;li&gt;列出表现最好的3-5个模型，最好他们的错误情况不同以便集成&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;微调系统&#34;&gt;微调系统&lt;/h2&gt;

&lt;p&gt;建议：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;随着微调的进行，你将会使用尽可能多的数据&lt;/li&gt;
&lt;li&gt;总是使你的操作自动化&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;使用交叉验证进行超参数的微调

&lt;ul&gt;
&lt;li&gt;将你的数据变换也变成超参数的一部分，特别是当你对数据不熟悉的时候（比如：我应该用0还是中位数填补缺失值，还是仅仅去掉那个样本？）&lt;/li&gt;
&lt;li&gt;除非超参数非常少，使用随机搜索而不是网格搜索。如果训练耗时非常久，你可能会想用贝叶斯优化方法。（比如使用高斯过程）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;采用集成方法。集成最优的方案，往往表现会超过单独模型方案。&lt;/li&gt;
&lt;li&gt;一旦你对自己的模型很有信心，那就在测试集上验证其泛化误差。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;方案呈现&#34;&gt;方案呈现&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;记下你所做的努力，文档化&lt;/li&gt;
&lt;li&gt;起草一份漂亮的展示稿

&lt;ul&gt;
&lt;li&gt;确保先强调大局&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;解释为何你的方案达到了商业目标&lt;/li&gt;
&lt;li&gt;不要忘记展现整个过程中你认为的有趣部分

&lt;ul&gt;
&lt;li&gt;讲述什么有效、以及什么没起作用&lt;/li&gt;
&lt;li&gt;列出你的前提条件，并说明边界&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;通过可视乎，确保你的关键发现易于理解和传播；或是利用容易记住的表达&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;部署&#34;&gt;部署&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;准备将你的解决方案接入生产环境（接入生产环境的数据，写单元测试等）&lt;/li&gt;
&lt;li&gt;写监控代码以监测系统的表现，当系统宕机时发出警告

&lt;ul&gt;
&lt;li&gt;要意识到，随着数据的更新，模型的效果也会衰减&lt;/li&gt;
&lt;li&gt;可能需要人工检测数据的表现&lt;/li&gt;
&lt;li&gt;同样监控输入数据（例如：失灵的传感器会传回随机的数据，而其他的传感器的输出会是一个稳定值）这对于在线学习系统尤为重要&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;当模型达到一定偏差时，重新在新数据上训练（尽可能自动化）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以上，我们从立项、数据准备、模型准备到模型的部署，全面梳理的真实项目中的机器学习模型生命周期。在真实的工业场景中，我们所作的可能有些许差别，但都差不多。例如：我们会对问题定义、会对数据进行探索、会给需求方呈现我们的解决方案、会监控我们的模型表现。&lt;/p&gt;

&lt;p&gt;在梳理过程中我也发现自身团队的不足：对大背景商业目标的认识不到位、很多时候是拿着锤子（模型）去找钉子（场景）、方案呈现上理工科思维偏重、系统迭代不足。除此之外，还有些细节不是很规范。简单来说就是有些跑马圈地、急功近利的感觉。业务向较重，算法模型潜力并未完全释放，在团队内推行以上规范非常有必要。&lt;/p&gt;

&lt;p&gt;不知道看本文的读者，你们的团队会有这样的情况吗？欢迎就此在评论区发表你的看法。喜欢本文的读者，别忘了点赞、喜欢、加关注哦，你的鼓励，将是我写作分享的动力(&lt;em&gt;^_^&lt;/em&gt;)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Slack gpt2 Bot 机器人写文已经到了如此地步？邀你一同测评史上最强 GPT2 模型</title>
      <link>https://kuhungio.me/2019/slack-gpt2-bot/</link>
      <pubDate>Mon, 25 Mar 2019 22:36:06 +0800</pubDate>
      
      <guid>https://kuhungio.me/2019/slack-gpt2-bot/</guid>
      <description>

&lt;p&gt;记得在校的时候，某岩做过一个app，讲接龙故事的。类似于我写一段，另一个人写接下来的一段，最后凑成一个完整的故事。当时，可产生了不少有意思的段子。最近，GPT2 模型的发布，让人不禁想到，有没有可能让机器来完成这个任务呢？机器写十四行诗、机器写莎士比亚风格的文章，机器写对联，这些都已经成为了现实。人工智能虽然没有带来突飞猛进的质变，但着实催生了很多有意思的小玩意儿。对于GPT2，一个字概括来说就是：壕——数据量大，算力能够 cover 住。这套算法模型网罗了几乎现有的所有文本数据，成功“过拟合“地屠榜，刷新多个 NLP 任务榜单排行。作者为了预防滥用模型、同时让别的研究者能够有个初步地认识，开源了一个小一些地模型。该模型的能力之一，就是我们今天的主题：接着别人地话写故事。今天我们要通过算法来实现。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kuhungio.me/images/slack-gpt2/slack.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;虽然作者有在尽力简化复现难度，但对于很多不是这行的人，让他去敲命令行来走完整个流程，还是困难重重。能够将深奥的原理讲给普通人听，并且简单易懂，是一项科学传播的必备能力。做为技术向的工程师，在产品处于雏形阶段时，能够通过一个 MVP 最小价值产品，实现核心功能，也是一项大大的加分项。对于今天的任务，我们选取容易上手，接口丰富的 slack 作为我们的前端交互窗口。&lt;/p&gt;

&lt;p&gt;如何构建一个 MVP 产品；或者具体的来讲，在我们的这个任务中，如何将数据挖掘工程师的模型成果，转化为可落地、可感知的产品或服务呢。操起斧子直接开干，依葫芦画瓢撸个前后端出来吗？这，其实是很多技术人员的一个误区——认为什么都可以从技术层面解决，”少废话别bb，bb is cheap，show me the code“。但从一个商业产品或服务商的角度来看，客户与渠道是前台，我们的客户是谁、如何触达客户以及选用何种渠道维系客户，是一个一开始就要考虑的事情。&lt;/p&gt;

&lt;p&gt;以这个 GPT2 bot 为例，我希望的客户是对 GPT感兴趣，但又没基础去折腾的学生或是其他领域的人士，抑或是没时间去跑 demo 的专业同行。如何触达客户：你看的这篇文章的平台，就是我的触达媒介。我最后选择用 slack 交付我的服务，而不是 qq 或 微信，是因为他成本更低，虽然阻挡了部分潜在客户，但权衡后是可以接受的。最后的工作才是依葫芦画瓢，照撸一个出来。本文参照了&lt;a href=&#34;https://github.com/EdwardHuCS/slack-gpt2&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;EdwardHuCS&lt;/a&gt;,并在其基础上做了部分改动。&lt;/p&gt;

&lt;p&gt;虽然这波 AI 热潮，让很多像我这样的非科班得以上车。但在实际生产环境中，我们还是暴露了诸多问题。其中之一，便是工程能力薄弱。会写 SQL 、会手推算法、会调包，但是就是不会写能跑的整个小系统。在业务变化快的公司中，这可能不是一个好事情。你的模型也许还在细调参数，但突然整个业务就没了。如果你能拿出一个能跑的马儿，兴许能影响这个业务。这就是前面提到的加分项。&lt;/p&gt;

&lt;p&gt;言归正传，我们回到在slack上面。我们的核心就以下代码：&lt;/p&gt;

&lt;h2 id=&#34;核心代码解读&#34;&gt;核心代码解读&lt;/h2&gt;

&lt;p&gt;导入一些基础配置&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import os
import time
import re
from slackclient import SlackClient
import sys
from gpt2.src import generate_unconditional_samples
# instantiate Slackk client
slack_client = SlackClient(&#39;&#39;) # 认证口令
# starterbot&#39;s user ID in Slack: value is ssigned after the bot starts up
starterbot_id = None

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;延迟配置以及样例和匹配模式&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# constants
RTM_READ_DELAY = 1 # 1 second delay between reading from RTM
EXAMPLE_COMMAND = &amp;quot;God, to me, is like a &amp;quot;
MENTION_REGEX = &amp;quot;^&amp;lt;@(|[WU].+?)&amp;gt;(.*)&amp;quot; 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;通过 slack 的事件，解析出我们的消息和对应的频道
def parse_bot_commands(slack_events):
    &amp;quot;&amp;quot;&amp;quot;
        Parses a list of events coming from the Slack RTM API to find bot commands.
        If a bot command is found, this function returns a tuple of command and channel.
        If its not found, then this function returns None, None.
    &amp;quot;&amp;quot;&amp;quot;
    for event in slack_events:
        if event[&amp;quot;type&amp;quot;] == &amp;quot;message&amp;quot; and not &amp;quot;subtype&amp;quot; in event:
            user_id, message = parse_direct_mention(event[&amp;quot;text&amp;quot;])
            if user_id == starterbot_id:
                return message, event[&amp;quot;channel&amp;quot;]
    return None, None
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;消息解析&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def parse_direct_mention(message_text):
    &amp;quot;&amp;quot;&amp;quot;
        Finds a direct mention (a mention that is at the beginning) in message text
        and returns the user ID which was mentioned. If there is no direct mention, returns None
    &amp;quot;&amp;quot;&amp;quot;
    matches = re.search(MENTION_REGEX, message_text)
    # the first group contains the username, the second group contains the remaining message
    return (matches.group(1), matches.group(2).strip()) if matches else (None, None)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;核心的模型导入&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def handle_command(command, channel):
    &amp;quot;&amp;quot;&amp;quot;
        Executes bot command if the command is known
    &amp;quot;&amp;quot;&amp;quot;
    # Default response is help text for the user
    response = &amp;quot;Not sure what you mean. Try *{}*.&amp;quot;.format(EXAMPLE_COMMAND)

    # This is where you start to implement more commands!
    if len(command) &amp;lt; 2:
        response = &amp;quot;Sure...write some more text then I can do that!&amp;quot;
    else:
        # 这里可以替换成任何你想要的模型
        response = &#39;&amp;quot;&#39;+command+generate_unconditional_samples.sample_model(nsamples=1, length=6*len(command), top_k=len(command), command=command)[0]


    # Sends the response back to the channel
    slack_client.api_call(
        &amp;quot;chat.postMessage&amp;quot;,
        channel=channel,
        text=response)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;主函数入口&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;if __name__ == &amp;quot;__main__&amp;quot;:
    if slack_client.rtm_connect(with_team_state=False):
        print(&amp;quot;Starter Bot connected and running!&amp;quot;)
        # Read bot&#39;s user ID by calling Web API method `auth.test`
        starterbot_id = slack_client.api_call(&amp;quot;auth.test&amp;quot;)[&amp;quot;user_id&amp;quot;]
        while True:
            command, channel = parse_bot_commands(slack_client.rtm_read())
            if command:
                handle_command(command, channel)
            time.sleep(RTM_READ_DELAY)
    else:
        print(&amp;quot;Connection failed. Exception traceback printed above.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;开始安装并运行&#34;&gt;开始安装并运行&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone git@github.com:kuhung/slack-gpt2.git
cd slack-gpt2
获取 slack app 的 token，并填充进上面的 slack_client
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;conda create -n slackbot python=3.6
source activate slackbot
pip install -r requirements.txt
cd gpt2
pip install -r requirements.txt
python download_model.py 117M
cd ..
python starterbot.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你不熟悉或从来没用过slack，也没关系，还记得开头说的交付吗？直接加入我的 workspace，一起测评 GPT2 bot。链接：&lt;a href=&#34;https://join.slack.com/t/kuhung/shared_invite/enQtNTc4ODcxNDUwNzA1LTI4ODNlODRhMjc1NGY2M2IwYjNhNmUzYmNiMzMyNTliN2E2ZWMxNWIzZjMzMzVkOTlkNzExNWVhYzZkNmYzMjI&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;加入我的 slack workspace&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;如同大多数应用场景一样，数据挖掘的算法需要落地，最好的办法就是封装成一个接口，给到前后端去调用。这其中还有很多性能优化的东西，但作为一个 sideproject，以上操作足够让你给别人眼前一亮的感觉。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Competing on Analytics 凭什么打败竞争对手？基于数据、基于分析的商业竞争</title>
      <link>https://kuhungio.me/2019/competing-on-analytics/</link>
      <pubDate>Tue, 12 Mar 2019 10:48:59 +0800</pubDate>
      
      <guid>https://kuhungio.me/2019/competing-on-analytics/</guid>
      <description>

&lt;p&gt;数据科学家这个职位，随着12年的哈佛商业评论的一篇文章，成为了21世纪“最性感的职业”。这年头，越来越多的年轻人开始往这个方向奔，市场几近饱和。但是，很少有听见企业家说：“是的，我们很需要数据工程师，因为以下原因&amp;hellip;“对于看此文的老板们，你们是否不止一次听到媒体鼓吹大数据、鼓吹机器学习、鼓吹人工智能，却很少有听到说这些东西，对于企业来说，实实在在带来了什么。如果你的答案是“Yes”，那么这篇文章将解答你的疑惑。&lt;/p&gt;

&lt;p&gt;本文论点主要取自 Thomas H. Davenport 文章 《Competing on Analytics》，试图从企业管理的角度，阐述为什么我们需要数据科学家（或者说广义的数据相关人员）；他们能给企业带来哪些切实的好处；以及作为企业家，我们该如何转型，如何拥有更强的竞争力。&lt;/p&gt;

&lt;h1 id=&#34;同质化的市场危机&#34;&gt;同质化的市场危机&lt;/h1&gt;

&lt;p&gt;在当下，想依靠某个新奇的点子或者是产品服务，已经不大可能再和其他竞争者区分开来。作为一个人类组织，底子里仍保留有人类的天性。人类天生就爱模仿，从一出生模仿吃东西，到后面通过模仿习得语言，再到后面的学习。人类的本质可能就是个复读机。模仿可以说保证了我们人类种族的存在与延续。对于企业来说，也大抵相同。&lt;/p&gt;

&lt;p&gt;尽管我们知道，从道德原则上讲，大企业模仿别的东西是不对的。但是，从商业利益角度，无数的事实告诉我们，模仿，对于企业来说真的是一个大概率稳赚不亏的事情。把市面稳定的产品拿来微创新，再加持自己的人力或渠道优势，很快就能回本。保不齐也能把竞争对手耗死。现实即是如此。&lt;/p&gt;

&lt;h1 id=&#34;比你更有利的竞争对手&#34;&gt;比你更有利的竞争对手&lt;/h1&gt;

&lt;p&gt;越来越多的产品、服务开始同质化。无论互联网、游戏、手机或是制造业、服装业，越成熟的领域这个现象越明显。与此同时，我们的竞争对手可能在东南亚，拥有更低的人工成本；可能在不规矩的私营企业，拥有更多免费加班的程序员；也可能是腾讯头条这样的大厂，控制着大部分渠道。那么，你的产品服务，凭什么脱颖而出？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;答案就是成为分析型竞争者&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&#34;数据分析竞争者在干什么&#34;&gt;数据分析竞争者在干什么&lt;/h1&gt;

&lt;p&gt;数据分析型竞争者会做以下几个事情。&lt;/p&gt;

&lt;h2 id=&#34;用户&#34;&gt;用户&lt;/h2&gt;

&lt;p&gt;通过分析，去洞察客户的需求，以及他们所愿支付的价格，找到他们保持忠诚度的原因。在商业模式中，客户是我们的直接服务对象，也是收入来源。那么，势必需要搞清楚客户的数据情况。&lt;/p&gt;

&lt;p&gt;在当下，比较流行的技术是通过用户画像技术，去刻画我们的用户群体。用户的分布地域、用户的性别以及年龄，用户的偏好。只有这些东西都搞清楚，我们才能清楚的知道我们的客户是谁，为什么他们需要我们的服务或产品。&lt;/p&gt;

&lt;h2 id=&#34;渠道&#34;&gt;渠道&lt;/h2&gt;

&lt;p&gt;与此同时，也要分析我们触达用户的渠道。不得不说，发明电视黄金档广告的人，一定是个商业奇才。曾几何时，电视广告和路标广告曾是众多老板的竞相争夺的资源，屡屡出现标王，一次次刷新记录。在那个时代，只要你砸钱，拿到黄金时间的广告，就是稳赚不赔。但现在不一样了，各种互联网渠道，在抢占着人们的注意力。楼宇电梯广告、站台路牌广告各种花样层出不穷。&lt;/p&gt;

&lt;p&gt;但是，你就真的清楚该投哪一个了吗？还是听信对方销售人员一阵天花乱坠的吹嘘，就乖乖交了钱，却得不到想要的转化效果？通过适当的分析，我们可以知道用户在哪些渠道对我们的响应度最高，知道哪些渠道可以带来更高的转化，从而优化我们的渠道成本投入。&lt;/p&gt;

&lt;p&gt;举个我自己的例子：我的文章隔几天就会发一篇，分布在不同渠道：微信、知乎、头条、掘金、简书。那我是单单为了占坑防洗稿就完事了吗？不是的，作为一个数据挖掘工程师，我会分析各个渠道带来的阅读、关注和互动，从而调整渠道策略。&lt;/p&gt;

&lt;p&gt;目前我就发现，知乎和头条的信息流产品在分发策略上做的很不错，能保证充分的曝光。微信适合做核心粉丝的沉淀，和粉丝去探讨交流一些问题。而掘金、简书的曝光有限，那我就会在更新是把他们往后放。&lt;/p&gt;

&lt;p&gt;那是不是我就应该放弃简书掘金了呢？也不是的。通过分析我发现，掘金在谷歌搜索的排名占比靠前，简书在百度搜索的排名靠前，他们俩实际是很好的 SEO 流量优化渠道。这就是渠道分析的效果。&lt;/p&gt;

&lt;h2 id=&#34;人力&#34;&gt;人力&lt;/h2&gt;

&lt;p&gt;通过分析，去计算员工对公司利润做出的具体贡献，而不仅仅是关注薪酬成本。以前的自己觉得，买东西或是做事情，先去看成本是多少。工作后发现，领导的视角不是这样的。成本对于老板们来说，只是个数字。他们更关心做事的投入产出比。对于员工问题也是这样。&lt;/p&gt;

&lt;p&gt;但现实不是这样的。很少有公司会关注这名员工对利润的贡献，反而更多的去关注他的成本是多少。他今天996了没，没有996对不起我给他开的价钱，而丝毫不关心员工对公司利润所做的贡献。而另一个极端就是，有些老板觉得这类人便宜，从而养了很多闲人。这两种情形虽然短时不会给企业带来多大负面影响，但你的竞争性选手，已经在利用数据，去发现员工的价值贡献，并对人事招聘进行调整了。&lt;/p&gt;

&lt;h2 id=&#34;库存&#34;&gt;库存&lt;/h2&gt;

&lt;p&gt;在实业中，我们还要追踪现有的库存，预测并分析需求量，减少库存的积压，提高现金流转效率。这里主要是对重资产的企业老板，如果你能在这其中发现机会，一个点的提升，都会带来巨大收益。&lt;/p&gt;

&lt;h1 id=&#34;数据分析竞争者的特质&#34;&gt;数据分析竞争者的特质&lt;/h1&gt;

&lt;p&gt;那么，集体来讲，分析型数据竞争者具有怎么样的特质呢？如同招聘时给出的工作描述，我们也可以给分析型竞争者做画像。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;数据竞争型选手应广泛应用模型和算法以及对应的最优化技术。例如作者之前实习的某普惠金融银行，通过最广泛的数据建模，给中小微个人提供贷款，赚大型银行看不上的钱，同时自己也很滋润。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;组织内部全面应用数据分析等相关技术。对各个流程进行数据分析、对各个环节进行建模以优化体验，减少流失。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;同时，也应该有自上而下的支持。如果一个企业的领军人物都不相信，那一线员工又何来的信任和执行力呢。企业老板应具备一些基础知识，同时有能够值得信任、不编造数据的专家。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;为什么它有效&#34;&gt;为什么它有效&lt;/h1&gt;

&lt;p&gt;说了现状说了要求，那为什么套措施有效呢？如果大家都有，那不就是没有差异化了吗？难道我们要搞军备竞赛吗？这不就和贩卖焦虑的自媒体一样的了吗？&lt;/p&gt;

&lt;p&gt;其实不是这样的。一个身材羸弱的人和一个经常分析自己身体状态并针对性强化的人，他们外在的表现就会不一样。大部分企业在竞争中，使用的技术很相近，产品差别也不大；唯一能有差异化的，可能就是商业流程了。数据的挖掘分析，帮助企业家从流程中挤出每一滴价值。&lt;/p&gt;

&lt;p&gt;尽管很多公司都有数据分析团队，但只有娴熟运用的公司，才能在各行各业取得霸主地位。甚至，对于如头条、亚马逊这样的公司，数据挖掘、算法已经成为了企业的名片和核心竞争力。&lt;/p&gt;

&lt;h1 id=&#34;核心4条解决方案&#34;&gt;核心4条解决方案&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;合适的焦点、分析不可过于分散，免得失去焦点。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;合适的文化、小范围检验，最小可行产品验证。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;合适的人才、有分析能力且能深入浅出说明问题；有商业才能能够在商业角度阐述价值；以及沟通的技巧。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;合适的技术、数据储备、硬件支持，最终才会立于不败之地。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最后，数据竞争型选手，如何说明他确实有效。很简单，以始为终点，检视最初的目标。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Prophet in 000300 我把算法模型套在了股市上，发现...</title>
      <link>https://kuhungio.me/2019/prophet-in-000300/</link>
      <pubDate>Fri, 08 Mar 2019 22:48:45 +0800</pubDate>
      
      <guid>https://kuhungio.me/2019/prophet-in-000300/</guid>
      <description>

&lt;h2 id=&#34;跑步进场&#34;&gt;跑步进场&lt;/h2&gt;

&lt;p&gt;最近股市大涨，不少人忙着跑步进场。作为保守型“投资者”，主投指数基金：沪深300。在这波行情 中，短短2个月，也有13%的账面收益。虽然知道指数类适合长期持有，但也好奇，这个点是否是高位了。为了解决这个疑虑。我们今天用算法模型套一套，看能否发现些什么。&lt;/p&gt;

&lt;h2 id=&#34;时序预测的价值&#34;&gt;时序预测的价值&lt;/h2&gt;

&lt;p&gt;时序问题的预测在生活中很常见。例如：游戏在线人数预测、消费情况预测、 O2O 的到店人数预测、交通流量预测，这些场景的精确预测，为资源的调配起到了重大的参考作用。从个体角度来说，得到的服务和体验也大大提升。&lt;/p&gt;

&lt;p&gt;为此，Facebook 开源了一套工具 Prophet，专门用于时间学列预测。在这里，我们将用它，来一探股市究竟。&lt;/p&gt;

&lt;h2 id=&#34;时序预测的原理&#34;&gt;时序预测的原理&lt;/h2&gt;

&lt;p&gt;对于时间序列问题，常用的手法是时间序列的分解：这里有些类似于傅里叶变换的意味。将一个函数分解为多个规律函数的和积。时间序列的常见组成成分包括：季节项、趋势项以及噪声。在 Prophet 中，结合实际情况，他们又加入了节假日项目。之前在一次 kaggle 的比赛中，我们也发现节假日的数据波动，其实是类似于周末效应的。即：节假日的前后数据，类似于周六的前后数据。对数据进行修正后，评价指标会好很多。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;废话不多说，咱们开干。&lt;/p&gt;

&lt;h2 id=&#34;prophet-in-沪深300&#34;&gt;Prophet in 沪深300&lt;/h2&gt;

&lt;h3 id=&#34;工具包安装&#34;&gt;工具包安装&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;pip install fbprophet&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;数据准备与清洗&#34;&gt;数据准备与清洗&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;import pandas as pd
import numpy as np
from fbprophet import Prophet
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;数据准备&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;数据来源为网易财经，&lt;a href=&#34;http://quotes.money.163.com/0000300.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;沪深三百&lt;/a&gt;指数。&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;data = pd.read_csv(&#39;../data/000300.csv&#39;,encoding=&#39;GB2312&#39;) 
data.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://kuhungio.me/images/prophet/300_1.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;数据清洗&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;选取需要的数据，并对数据做 log / box-cox 变换，使数据更符合线性、正态分布，减少方差差异。经济系统和生态系统类似，都存在指数级增长现象，也存在饱和现象。我们这里采用 log 变换。&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df = data[[u&#39;日期&#39;,u&#39;收盘价&#39;]]
df.columns = [&#39;ds&#39;,&#39;y&#39;]
df[&#39;y&#39;] = df[&#39;y&#39;].apply(lambda x: np.log(int(x)))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;模型拟合与预测&#34;&gt;模型拟合与预测&lt;/h3&gt;

&lt;p&gt;简单定义，然后拟合。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;m = Prophet()
m.fit(df)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;预测未来一年的行情&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;future = m.make_future_dataframe(periods=365)
forecast = m.predict(future)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;详细看最后15天的数据&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;forecast[[&#39;ds&#39;, &#39;yhat&#39;, &#39;yhat_lower&#39;, &#39;yhat_upper&#39;]].tail(15)
future_predict[&#39;yhat&#39;] = future_predict[&#39;yhat&#39;].apply(lambda x:np.exp(x))
future_predict[&#39;yhat_lower&#39;] = future_predict[&#39;yhat_lower&#39;].apply(lambda x:np.exp(x))
future_predict[&#39;yhat_upper&#39;] = future_predict[&#39;yhat_upper&#39;].apply(lambda x:np.exp(x))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://kuhungio.me/images/prophet/300_2.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;yhat 预测比较保守，20200307 相较于目前20190308 的大盘涨了100个点。预期最大收益：(6536-3658)/3658≈ 78%，预期最大亏损：(2158-3658)/3658≈-41%&lt;/p&gt;

&lt;h3 id=&#34;模型看到了什么&#34;&gt;模型看到了什么&lt;/h3&gt;

&lt;p&gt;Prophet 有个功能是成分拆分，咱们来看看国内股市的趋势以及季节性因素是什么。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig1 = m.plot(forecast)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;模型拟合情况&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kuhungio.me/images/prophet/300_3.png&#34; alt=&#34;模型拟合情况&#34; /&gt;&lt;/p&gt;

&lt;p&gt;趋势项&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kuhungio.me/images/prophet/300_4.png&#34; alt=&#34;整体趋势、周趋势和年趋势&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;模型数据表明，沪深股市短期看可能有波动，长期看上扬可能性更大。短期对于我们这种投资方式的参考意义不大，长期来看，稳中向好，我也将持续沪深300。当然，话说回来，投资有风险，决策需谨慎。不要只看狼吃肉，不见狼挨打。去年最差的时候，本人累计亏损15%&amp;hellip;&lt;/p&gt;

&lt;p&gt;另外再强调一下，模型并非万能。这里使用的信息单一，但真实世界，可是有多种信息共同作用于市场。模型也还未经过充分调参，没有划分数据做验证，实际使用价值有限。&lt;/p&gt;

&lt;p&gt;对此，你怎么看？欢迎在留言区写下你的看法。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Next Step for Machine Learning 机器学习落地需攻破的9个难题</title>
      <link>https://kuhungio.me/2019/the-next-step-for-machine-learning/</link>
      <pubDate>Sun, 24 Feb 2019 23:31:58 +0800</pubDate>
      
      <guid>https://kuhungio.me/2019/the-next-step-for-machine-learning/</guid>
      <description>

&lt;p&gt;机器学习在前两年的时间里，一下子就爆火了起来。很多公司也跟着这个趋势，招募了很多算法工程师、数据挖掘工程师。但是，在实践中，企业发现要落地，实际上还有很多问题需解决。以至于在大部分项目，还是规则主导。算法工程师的日常，也不过是清洗数据，调整规则。所以，机器学习技术，在真实的应用中到底缺少些什么呢？&lt;/p&gt;

&lt;p&gt;在国立台湾大学《机器学习》&lt;a href=&#34;https://www.youtube.com/watch?v=XnyM3-xtxHs&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;2019春季班&lt;/a&gt;，李宏毅老师给出了他的观察。以下的内容，结合李老师的最新讲义、加上我本身工作的理解，给大家梳理机器学习落地急需解决的9个难题。&lt;/p&gt;

&lt;h2 id=&#34;拒绝回答与可解释性-哲学层面&#34;&gt;拒绝回答与可解释性（哲学层面）&lt;/h2&gt;

&lt;h3 id=&#34;1-anomaly-detection-机器能不能知道-我不知道&#34;&gt;1. Anomaly Detection 机器能不能知道“我不知道”&lt;/h3&gt;

&lt;p&gt;机器能不能知道自己的识别范围，还是说生硬地给出模型内的东西，或者说抛出无法识别。在猫狗分类里，现有的模型已经到达很高的精度，甚至能给出猫狗的品种。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kuhungio.me/images/the-next-step-fro-ML/Cat.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;但是正式上线后，用户真的会乖乖给到猫狗的图片吗？如果用户丢一张妹子图，机器能够知道自己不知道吗？目前这个领域的研究叫做 Anomaly Detection。知道自己不知道，对于一些异常的情况，十分重要。&lt;/p&gt;

&lt;h3 id=&#34;2-explainable-ai-说出为什么-我知道&#34;&gt;2. Explainable AI 说出为什么“我知道”&lt;/h3&gt;

&lt;p&gt;神马汉斯的故事：&lt;/p&gt;

&lt;p&gt;18世纪德国，一匹名叫汉斯的马成为当地网红。他能够计算简单的算术题，并用蹄子敲出正确回答。这在当时一度引起轰动。后来，有人做了个实验，把汉斯和周围的人完全隔绝，这匹马就完全蒙圈了。时事证明，这匹马的神奇能力不在于他的算数能力，而在于他的观察能力。当给到正确答案时，周围的人会有不一样的反应，汉斯也就随即停止敲马蹄。&lt;/p&gt;

&lt;p&gt;机器学习的成果，是否同汉斯一样，通过一些意想不到的渠道，获得的答案。在 &lt;a href=&#34;http://www.heatmapping.org/slides/2017_GCPR.pdf&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;GCPR 2017 Tutorial&lt;/a&gt; 的研究中，研究者通过注意力机制，研究机器判断的依据。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kuhungio.me/images/the-next-step-fro-ML/GCPR2017.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;实验者测试了两个模型，两个模型均为马匹识别。DNN 模型的焦点集中在马匹身上，是一个正常的模型。但 FV 的交点却集中在图片左下角。原来，图片的左下角有图片的出处，所有的包含马匹的图都有这个标记。所以，FV 模型学到的重点在于这些标记。同样的表现，却是不一样的判断依据。显然，FV 模型的判断依据是滑稽和不可靠的。&lt;/p&gt;

&lt;p&gt;我们需要一些技术，让 AI 不仅给出结果，同时要给出判断的依据。即：模型的可解释性。&lt;/p&gt;

&lt;h2 id=&#34;抵御恶意攻击&#34;&gt;抵御恶意攻击&lt;/h2&gt;

&lt;h3 id=&#34;3-防止-adversarial-attack&#34;&gt;3. 防止 Adversarial Attack&lt;/h3&gt;

&lt;p&gt;人有错觉，机器是否也会有错觉。我们来做一个认知实验。以下两个圈圈，哪个的颜色更深？好，记住你的答案。结果将在稍后揭晓。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kuhungio.me/images/the-next-step-fro-ML/mistake.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;对于机器，有研究表明，通过改变图像中的个别像素，可以起到迷惑机器的作用。改变一个像素，就可以让模型的判断结果从熊猫到长臂猿。该技术名叫 Adversarial Attack。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kuhungio.me/images/the-next-step-fro-ML/m_mistake.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这样的技术相当危险。举个例子，当自动驾驶的车辆行驶在路上时，可能路边的人挥舞下旗子，机器的判断就会被干扰，做出不当的举动。&lt;/p&gt;

&lt;p&gt;回到开头的例子，正确答案是左边。这其实是一个计中计。你以为这是视觉认知实验，其实这也是某种形式的“心理攻击”。
&lt;img src=&#34;https://kuhungio.me/images/the-next-step-fro-ML/mistake_2.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;学习模式&#34;&gt;学习模式&lt;/h2&gt;

&lt;h3 id=&#34;4-life-long-learning-终身学习&#34;&gt;4. Life-long learning 终身学习&lt;/h3&gt;

&lt;p&gt;终身学习是一个人类行为的概念。活到老学到老，大家都知道只有不断更新自己的知识，才能跟上社会发展的步伐。同时呢，先前学到的东西，对后面的学习仍有帮助。举个例子：学完线性代数之后，对学习和理解机器学习就大有帮助。&lt;/p&gt;

&lt;p&gt;但是，机器不一样。今天的我们，一般只让一个模型学习一个任务。但这样会存在一些问题。首先是随着建模的增多，模型数量将无限增长。其次，模型之前学到的技能，对之后的学习没有帮助。就像 Alphastar 它玩星际争霸很棒，但让他同时学下围棋，目前来说是不行的。它和 Alphazero 是两个不同的模型 。&lt;/p&gt;

&lt;p&gt;那么，自然而然的，我们就会抛出这样一个疑问，机器能否终身学习呢？这里的相关研究，提个关键词 Catastrophic Forgetting 。&lt;/p&gt;

&lt;h3 id=&#34;5-meta-learning-learn-to-learn-学习如何学习&#34;&gt;5. Meta-learning / Learn to learn 学习如何学习&lt;/h3&gt;

&lt;p&gt;现有的机器学习模型设计，都遵循着这样一个范式——在特定领域人工设计一套算法，让机器去学习。我们就想，能不能设计一套算法，让机器自己去设计自己的学习算法呢？&lt;/p&gt;

&lt;p&gt;这样的范式，我们称之为 meta-learning 元学习，或者叫 learn to learn，学习如何学习。&lt;/p&gt;

&lt;h2 id=&#34;模型改进&#34;&gt;模型改进&lt;/h2&gt;

&lt;h3 id=&#34;6-reinforcement-learning-增强学习为什么这么慢&#34;&gt;6. Reinforcement learning 增强学习为什么这么慢&lt;/h3&gt;

&lt;p&gt;现在撸模型，没用上增强学习，都不好意思说出来。在像星际争霸这样的游戏中，增强学习确实有用。但是，它真的有那么强吗？&lt;/p&gt;

&lt;p&gt;在星际争霸中，机器花了900小时，才到达4000分左右。而人类的能力在哪儿呢？人类只需要2小时，就能到达。像前面提到的Alphastar，它虽然在星际争霸上能够痛扁人类，但它可是花了200年的时间在玩这个游戏。模型世界就像是修仙小说里的精神世界。若是把一个人丢在里面，只能玩星际争霸，他其实也可以达到机器的水平，更可能比机器做得更好。增强学习为什么这么慢，能不能再快些？&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kuhungio.me/images/the-next-step-fro-ML/Alphastar.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;7-network-compression-神经网络压缩&#34;&gt;7. Network Compression 神经网络压缩&lt;/h3&gt;

&lt;p&gt;机器学习目前多运行在大型服务器上，配备极强的 GPU、相当大的内存和数目众多的 CPU。但若想要把机器学习广泛应用于生活中，IoT 物联网这类设备的计算和存储都是十分有限的。我们能不能把模型缩小，同时保留其能力呢。我们能不能把大型神经网络进行剪枝，或者是参数二元化，以此来减轻内存和计算压力呢。我们现在有 tensorflow lite，有 coreML，但这些还不够。&lt;/p&gt;

&lt;h2 id=&#34;训练数据&#34;&gt;训练数据&lt;/h2&gt;

&lt;h3 id=&#34;8-few-shot-zero-shot-learning-一定需要很多训练数据吗&#34;&gt;8. Few-shot / Zero-shot learning 一定需要很多训练数据吗&lt;/h3&gt;

&lt;p&gt;做比赛、写论文的都知道，要想效果好，数据少不了。数据质量很大程度决定了结果的表现。但是在实际生产环境中，带标注的优质数据是极其稀少的。这个时候，老板想让你做一个异常游戏玩家的识别，数据样本又很少，你该怎么办？除去自己手工标注、请人标注、做数据扩增外，我们还有很没有别的办法。难道要跟老板摊牌，说做不了这一个任务吗？&lt;/p&gt;

&lt;p&gt;现实场景的样本之少，一直有在困惑我们一线的员工。现在我们就希望，模型能够通过少量的样本，扩展到大量的未标记数据。这样的研究有，我们称之为 Few-shot learning。更有甚至，模型能不能通过我对川菜的描述：麻辣、重油、就识别出桌上的饭菜是四川菜呢？这样的模型被称之为 Zero-shot learing，不需要样本进行学习。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kuhungio.me/images/the-next-step-fro-ML/caption.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;9-机器学习的谎言-训练数据和测试数据很不一样&#34;&gt;9. 机器学习的谎言 训练数据和测试数据很不一样&lt;/h3&gt;

&lt;p&gt;当我们在学习机器学习各类算法时，教科书都会有这样一个假设：训练数据和测试数据拥有相同的分布。但在真实世界中，这就是个谎言。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kuhungio.me/images/the-next-step-fro-ML/train-test.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;以手写数字识别为例，当训练集和测试集同分布时，你可以轻松达到99%的正确率。但在真实生活中，你的老板可能会给你右边的任务。训练数据是黑白的，实际场景中背景却是彩色的。这里你有两个选择：一是把《机器学习》这本数仍到老板面前，告诉他书上写的要求同分布，你这个任务做不了。但是一想到你家里的老婆孩子，你可能还是会含泪接下这个任务。仔细想想，若是模型真的识别到数字的形状，背景色应该没有关系吧。但是当你真正来做这件事时，你会发现，同样的模型，正确率下降到了57.5%。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kuhungio.me/images/the-next-step-fro-ML/train-test-2.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;诸如此类的问题，在真实场景中很常见。实际工作中，我们也有采取一些措施，尽量避免分布不同步的情况发生。&lt;/p&gt;

&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;李宏毅老师以上的总结，在生产环境确实存在。这也是我把它梳理一遍的动机，希望所有从业者在工作中能够注意到它们，在这些问题上有所突破。看完本文的读者，别忘了点赞、评论、喜欢+关注哦。你的鼓励，是我下一步的动力。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bert Chinese Finetune 中文语料的 Bert 微调</title>
      <link>https://kuhungio.me/2019/bert-chinese-finetune/</link>
      <pubDate>Sun, 17 Feb 2019 11:30:26 +0800</pubDate>
      
      <guid>https://kuhungio.me/2019/bert-chinese-finetune/</guid>
      <description>

&lt;h1 id=&#34;finetune-bert-for-chinese&#34;&gt;Finetune Bert for Chinese&lt;/h1&gt;

&lt;p&gt;NLP 问题被证明同图像一样，可以通过 finetune 在垂直领域取得效果的提升。Bert 模型本身极其依赖计算资源，从 0 训练对大多数开发者都是难以想象的事。在节省资源避免重头开始训练的同时，为更好的拟合垂直领域的语料，我们有了 finetune 的动机。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/google-research/bert&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Bert&lt;/a&gt; 的文档本身对 finetune 进行了较为详细的描述，但对于不熟悉官方标准数据集的工程师来说，有一定的上手难度。随着 &lt;a href=&#34;https://github.com/hanxiao/bert-as-service&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Bert as service&lt;/a&gt; 代码的开源，使用 Bert 分类或阅读理解的副产物&amp;ndash;词空间，成为一个更具实用价值的方向。&lt;/p&gt;

&lt;p&gt;因而，此文档着重以一个例子，梳理 &lt;strong&gt;finetune 垂直语料，获得微调后的模型&lt;/strong&gt; 这一过程。Bert 原理或 Bert as service 还请移步官方文档。&lt;/p&gt;

&lt;h2 id=&#34;依赖&#34;&gt;依赖&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python==3.6
tensorflow&amp;gt;=1.11.0
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;预训练模型&#34;&gt;预训练模型&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;下载 &lt;strong&gt;&lt;a href=&#34;https://storage.googleapis.com/bert_models/2018_11_03/chinese_L-12_H-768_A-12.zip&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;BERT-Base, Chinese&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;:
Chinese Simplified and Traditional, 12-layer, 768-hidden, 12-heads, 110M
parameters&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;数据准备&#34;&gt;数据准备&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;train.tsv&lt;/code&gt; 训练集&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dev.tsv&lt;/code&gt; 验证集
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;数据格式&#34;&gt;数据格式&lt;/h4&gt;

&lt;p&gt;第一列为 label，第二列为具体内容，tab 分隔。因模型本身在字符级别做处理，因而无需分词。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csv&#34;&gt;fashion	衬衫和它一起穿,让你减龄十岁!越活越年轻!太美了!...
houseliving	95㎡简约美式小三居,过精美别致、悠然自得的小日子! 屋主的客...
game	赛季末用他们两天上一段，7.20最强LOL上分英雄推荐！ 各位小伙...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;样例数据位置：&lt;a href=&#34;https://github.com/kuhung/bert_finetune/tree/master/data&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;data&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;数据格式取决于业务场景，后面也可根据格式调整代码里的数据导入方式。&lt;/p&gt;

&lt;h2 id=&#34;操作&#34;&gt;操作&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/google-research/bert.git
cd bert
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;bert 的 finetune 主要存在两类应用场景：分类和阅读理解。因分类较为容易获得样本，以下以分类为例，做模型微调：&lt;/p&gt;

&lt;h3 id=&#34;修改-run-classifier-py&#34;&gt;修改 &lt;code&gt;run_classifier.py&lt;/code&gt;&lt;/h3&gt;

&lt;h4 id=&#34;自定义-dataprocessor&#34;&gt;自定义 DataProcessor&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class DemoProcessor(DataProcessor):
    &amp;quot;&amp;quot;&amp;quot;Processor for Demo data set.&amp;quot;&amp;quot;&amp;quot;

    def __init__(self):
        self.labels = set()
    
    def get_train_examples(self, data_dir):
        &amp;quot;&amp;quot;&amp;quot;See base class.&amp;quot;&amp;quot;&amp;quot;
        return self._create_examples(
            self._read_tsv(os.path.join(data_dir, &amp;quot;train.tsv&amp;quot;)), &amp;quot;train&amp;quot;)

    def get_dev_examples(self, data_dir):
        &amp;quot;&amp;quot;&amp;quot;See base class.&amp;quot;&amp;quot;&amp;quot;
        return self._create_examples(
            self._read_tsv(os.path.join(data_dir, &amp;quot;dev.tsv&amp;quot;)), &amp;quot;dev&amp;quot;)

    def get_test_examples(self, data_dir):
      &amp;quot;&amp;quot;&amp;quot;See base class.&amp;quot;&amp;quot;&amp;quot;
      return self._create_examples(
          self._read_tsv(os.path.join(data_dir, &amp;quot;test.tsv&amp;quot;)), &amp;quot;test&amp;quot;)

    def get_labels(self):
        &amp;quot;&amp;quot;&amp;quot;See base class.&amp;quot;&amp;quot;&amp;quot;
        # return list(self.labels)
        return [&amp;quot;fashion&amp;quot;, &amp;quot;houseliving&amp;quot;,&amp;quot;game&amp;quot;] # 根据 label 自定义


    def _create_examples(self, lines, set_type):
        &amp;quot;&amp;quot;&amp;quot;Creates examples for the training and dev sets.&amp;quot;&amp;quot;&amp;quot;
        examples = []
        for (i, line) in enumerate(lines):
            guid = &amp;quot;%s-%s&amp;quot; % (set_type, i)
            text_a = tokenization.convert_to_unicode(line[1])
            label = tokenization.convert_to_unicode(line[0])
            self.labels.add(label)
            examples.append(
                InputExample(guid=guid, text_a=text_a, text_b=None, label=label))
        return examples

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;添加-demoprocessor&#34;&gt;添加 DemoProcessor&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;  processors = {
      &amp;quot;cola&amp;quot;: ColaProcessor,
      &amp;quot;mnli&amp;quot;: MnliProcessor,
      &amp;quot;mrpc&amp;quot;: MrpcProcessor,
      &amp;quot;xnli&amp;quot;: XnliProcessor,
      &amp;quot;demo&amp;quot;: DemoProcessor,
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;启动训练&#34;&gt;启动训练&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;export BERT_Chinese_DIR=/path/to/bert/chinese_L-12_H-768_A-12
export Demo_DIR=/path/to/DemoDate

python run_classifier.py \
  --task_name=demo \
  --do_train=true \
  --do_eval=true \
  --data_dir=$Demo_DIR \
  --vocab_file=$BERT_Chinese_DIR/vocab.txt \
  --bert_config_file=$BERT_Chinese_DIR/bert_config.json \
  --init_checkpoint=$BERT_Chinese_DIR/bert_model.ckpt \
  --max_seq_length=128 \
  --train_batch_size=32 \
  --learning_rate=2e-5 \
  --num_train_epochs=3.0 \
  --output_dir=/tmp/Demo_output/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;若一切顺利，将会有以下输出:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;***** Eval results *****
  eval_accuracy = xx
  eval_loss = xx
  global_step = xx
  loss = xx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最终，微调后的模型保存在&lt;strong&gt;output_dir&lt;/strong&gt;指向的文件夹中。&lt;/p&gt;

&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;Bert 预训练后的 finetune，是一种很高效的方式，节省时间，同时提高模型在垂直语料的表现。finetune 过程，实际上不难。较大的难点在于数据准备和 pipeline 的设计。从商业角度讲，应着重考虑 finetune 之后，模型有效性的证明，以及在业务场景中的应用。如果评估指标和业务场景都已缕清，那么不妨一试。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Github 地址：&lt;a href=&#34;https://github.com/kuhung/bert_finetune&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://github.com/kuhung/bert_finetune&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;参考资料&#34;&gt;参考资料&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NLPScott/bert-Chinese-classification-task&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://github.com/NLPScott/bert-Chinese-classification-task&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jianshu.com/p/aa2eff7ec5c1&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://www.jianshu.com/p/aa2eff7ec5c1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>What is Data Mining 什么是数据挖掘</title>
      <link>https://kuhungio.me/2019/what-is-data-mining/</link>
      <pubDate>Sun, 17 Feb 2019 00:40:20 +0800</pubDate>
      
      <guid>https://kuhungio.me/2019/what-is-data-mining/</guid>
      <description>

&lt;!-- more --&gt;

&lt;h2 id=&#34;一-数据挖掘的定义&#34;&gt;一、数据挖掘的定义&lt;/h2&gt;

&lt;h3 id=&#34;什么是数据挖掘&#34;&gt;什么是数据挖掘？&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;数据挖掘是一个用数据发现问题、解决问题的学科。&lt;/li&gt;
&lt;li&gt;通常通过对数据的探索、处理、分析或建模实现。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;数据挖掘学习路线&#34;&gt;数据挖掘学习路线&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;大学里并没有数据挖掘这么一个专业，现有的数据挖掘工程师大都来自工科或统计学等专业。&lt;/li&gt;
&lt;li&gt;目前的数据挖掘工程师大都来自不同背景，计算机科学、数学甚至是机械工程。要想成功胜任，其诀窍是热情、好奇心，不断学习新的工具的能力，以及对数据清洗和分析的耐心。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;给新人的建议&#34;&gt;给新人的建议&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;最重要的三个品质：好奇心、是非观以及批判性思考。这三个品质，放在其他领域同样适用。&lt;/li&gt;
&lt;li&gt;专业领域的三种能力：编程能力、统计基础、商业思维。编程和统计在大学较为容易学到，商业思维需要多实践总结。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;二-数据挖掘在做什么&#34;&gt;二、数据挖掘在做什么&lt;/h2&gt;

&lt;h3 id=&#34;数据挖掘工程师的一天&#34;&gt;数据挖掘工程师的一天&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;检查日常报表数据是否异常，寻求数据波动的合理解释。&lt;/li&gt;
&lt;li&gt;针对新业务，设计指标，搭建数据模型。&lt;/li&gt;
&lt;li&gt;搭建商品推荐系统、价格预测系统、文本分类系统或是聊天机器人。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;数据挖掘的算法&#34;&gt;数据挖掘的算法&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;使用复杂的机器学习算法并不能保证效果。一般来讲，最好的解决办法，通常很简单。&lt;/li&gt;
&lt;li&gt;生产环境使用简单的算法，并不意味着要放弃前沿算法。每一套新的方法，其目的都在解决前面的薄弱之处。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;数据挖掘与服务器&#34;&gt;数据挖掘与服务器&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;本地 PC 由于硬件与系统限制，工程师常在服务器进行大规模数据的运算、脚本部署与接口部署。

&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;三-商业中的数据挖掘&#34;&gt;三、商业中的数据挖掘&lt;/h2&gt;

&lt;h3 id=&#34;作为公司-该如何开展数据挖掘&#34;&gt;作为公司，该如何开展数据挖掘&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;评估可能的收益与需要的投入&lt;/li&gt;
&lt;li&gt;开始收集数据&lt;/li&gt;
&lt;li&gt;招募数据挖掘团队&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;招聘数据挖掘团队&#34;&gt;招聘数据挖掘团队&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;好奇心应该是数据挖掘从业者的最重要品质。&lt;/li&gt;
&lt;li&gt;招聘时，应确保候选人对工作内容感兴趣。&lt;/li&gt;
&lt;li&gt;候选人应具备一定的成果意识。商业更重成果，而不是过程。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;数据挖掘应用&#34;&gt;数据挖掘应用&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;广告位点击预估&lt;/li&gt;
&lt;li&gt;信用卡风控评估&lt;/li&gt;
&lt;li&gt;用户流失干预&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;四-数据挖掘工具&#34;&gt;四、数据挖掘工具&lt;/h2&gt;

&lt;h3 id=&#34;数据挖掘工具与大数据&#34;&gt;数据挖掘工具与大数据&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;掌握以下工具：Python、Linux、Pandas 及 Jupyter、关系型和非关系型数据库。&lt;/li&gt;
&lt;li&gt;大数据通常指传统数据系统无法处理的数据。体量和增速都相当大。处理工具以 Hadoop 为代表。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;五-数据挖掘进阶&#34;&gt;五、数据挖掘进阶&lt;/h2&gt;

&lt;h3 id=&#34;神经网络和深度学习&#34;&gt;神经网络和深度学习&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;神经网络出现已数十年，但由于条件限制，这一方向搁置了数十年。目前随着新的优化方法的出现和算力的提升，这一方向的工业化逐渐成为可能。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;如何更上一层楼&#34;&gt;如何更上一层楼&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;掌握基本的编程知识，更多地去理解背后的原理。&lt;/li&gt;
&lt;li&gt;流程化意识，及时复盘总结，规范流程（复用）。&lt;/li&gt;
&lt;li&gt;成果导向，将知识转化为行动和成果，给他人带来价值，服务更多人。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>12306Bypass Server 给抢票神器加上微信提醒</title>
      <link>https://kuhungio.me/2019/12306bypass-server/</link>
      <pubDate>Sat, 26 Jan 2019 15:52:08 +0800</pubDate>
      
      <guid>https://kuhungio.me/2019/12306bypass-server/</guid>
      <description>

&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;

&lt;p&gt;春节假期临近，车票一度紧张。某行、某团开了加速包后，仍然无法第一时间刷到目的地的票。稍微有点儿技术底子的我们岂能坐以待毙，自然是要自己动手，丰衣足食。&lt;/p&gt;

&lt;p&gt;网上有各类开源的工具包，这里不做过多点评。之前在好友圈内传得比较靠谱的是 12306Bypass，又叫分流。分流是一个 Windows 应用，工作在 PC 端。其核心功能完全免费，更更重要的是，它的监控刷新在本地可以真实的感知。&lt;/p&gt;

&lt;p&gt;以前在学校还好，可以守在电脑面前。但工作后，由于各种原因，无法第一时间获取分流的抢票信息，因而白白错过好几次下单付钱的机会。于是我们就有了这样一个愿望，希望能将分流的信息第一时间转发。&lt;/p&gt;

&lt;p&gt;前几日逛某论坛，有人向分流开发者传达了增加 Server 酱的请求。开发者还是很给力，在最近的几次版本迭代中实现了该功能。简单的来说，Server 酱就是一个提醒服务。在这里，我们把它用在抢票软件中。当软件抢到票时，通过该服务，给到微信提醒。通知我们及时付款。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kuhungio.me/images/12306bypass/File_wechat.jpg&#34; alt=&#34;微信推送&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kuhungio.me/images/12306bypass/File.jpg&#34; alt=&#34;最终效果&#34; /&gt;&lt;/p&gt;

&lt;p&gt;通过这样的形式，即可在微信端第一时间收到下订单的信息。那么如何配置这样的一个服务呢？我们只需要以下步骤。&lt;/p&gt;

&lt;p&gt;​&lt;/p&gt;

&lt;h1 id=&#34;准备工作&#34;&gt;准备工作&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;最新版本的分流软件 搜索关键词：12306Bypass

&lt;ul&gt;
&lt;li&gt;这里使用的版本号是&lt;code&gt;1.13.30&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;没用过？&lt;a href=&#34;https://www.12306bypass.com/?utm_source=kuhungio.me&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;下载链接&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Github 账号 这里用做 Server 酱的登陆认证

&lt;ul&gt;
&lt;li&gt;不知道？&lt;a href=&#34;https://github.com/?utm_source=kuhungio.me&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;注册链接&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;实操阶段&#34;&gt;实操阶段&lt;/h1&gt;

&lt;h2 id=&#34;server-酱&#34;&gt;Server 酱&lt;/h2&gt;

&lt;p&gt;用于获取认证的接口&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;登入：用GitHub账号 &lt;a href=&#34;http://sc.ftqq.com/?c=github&amp;amp;a=login?utm_source=kuhungio.me&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;登入网站&lt;/a&gt;，获取&lt;a href=&#34;http://sc.ftqq.com/?c=code&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;SCKEY&lt;/a&gt;（在「&lt;a href=&#34;http://sc.ftqq.com/?c=code&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;发送消息&lt;/a&gt;」页面）&lt;/li&gt;
&lt;li&gt;绑定：点击「&lt;a href=&#34;http://sc.ftqq.com/?c=wechat&amp;amp;a=bind&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;微信推送&lt;/a&gt;」，扫码关注同时即完成绑定&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://kuhungio.me/images/12306bypass/Screenshot_1.jpg&#34; alt=&#34;SCKEY&#34; /&gt;&lt;/p&gt;

&lt;p&gt;记住 &lt;strong&gt;SCKEY&lt;/strong&gt; ，我们接下来会用着。&lt;/p&gt;

&lt;h2 id=&#34;分流&#34;&gt;分流&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;启动分流，按正常流程配置票务信息。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;点选主界面左下角的推送&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://kuhungio.me/images/12306bypass/Screenshot_2.jpg&#34; alt=&#34;分流推送功能&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;填入以下信息&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;通知地址 `&lt;a href=&#34;https://sc.ftqq.com/[SCKEY].send&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://sc.ftqq.com/[SCKEY].send&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;通知参数  &lt;code&gt;text=#bypass#&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://kuhungio.me/images/12306bypass/Screenshot_3.jpg&#34; alt=&#34;推送配置&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;点击测试发送，即可在微信端，收到本文一开始的推送测试提醒啦&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;实际效果&#34;&gt;实际效果&lt;/h1&gt;

&lt;p&gt;就在配置完成不久后，分流帮我抢到了回家的车票。同时在微信端，Server 酱强制推送。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kuhungio.me/images/12306bypass/IMG_0330.jpg&#34; alt=&#34;成功推送&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kuhungio.me/images/12306bypass/File_succeed.jpg&#34; alt=&#34;成功详情&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;总结&#34;&gt;总结&lt;/h1&gt;

&lt;p&gt;通过这样的一番配置，我们终于能够安稳的玩耍手机，而不用担心错过订单付款时间。事实上，分流本身的基础功能，也自带了一些提醒服务。但是他们大多较为繁琐。以 QQ 提醒为例，有被顶掉下线的风险。自带的微信提醒，模拟的微信桌面登陆，理论上需要2个微信号。按照上面的操作，我们只需要简单的配置，即可实现强制推送，错过的几率大大减小。&lt;/p&gt;

&lt;p&gt;这样的推送服务，其应用场景不局限于此。这也是我琢磨它的原因之一——应用场景广泛。只要需要推送的地方，都可以嵌入这样一套服务。例如网站新增评论、或是按秒计费的服务器上模型训练结束等等。&lt;/p&gt;

&lt;p&gt;Server 酱实现的功能有限，仅针对微信推送。但这也是它针对国内业务的一种优化。类似这样的推送服务很多，国外的 Slack 功能组件也很丰富。在一些涉及敏感信息的领域，构建一套自己的推送服务，也是不错的主意。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://kuhungio.me/about/</link>
      <pubDate>Wed, 09 Jan 2019 00:14:04 +0800</pubDate>
      
      <guid>https://kuhungio.me/about/</guid>
      <description>

&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;笔名：谷粒 | kuhung&lt;/li&gt;
&lt;li&gt;毕业院校：华中科技大学 机械学院&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;过往成果&#34;&gt;过往成果&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;2018-08 | 第七届全国媒体技术处理大会 | 文本溯源技术测评 | &lt;sup&gt;5&lt;/sup&gt;&amp;frasl;&lt;sub&gt;95&lt;/sub&gt;&lt;/li&gt;
&lt;li&gt;2017-06 | Kaggle | Intel&amp;amp;MobileODTCervicalCancerScreening  | top10%&lt;/li&gt;
&lt;li&gt;2017-02 | DataCastle | 精准资助预测赛 | &lt;sup&gt;7&lt;/sup&gt;&amp;frasl;&lt;sub&gt;124&lt;/sub&gt;&lt;/li&gt;
&lt;li&gt;2016-12 | 2016 BYTE CUP | 国际机器学习竞赛 | &lt;sup&gt;8&lt;/sup&gt;&amp;frasl;&lt;sub&gt;1029&lt;/sub&gt;&lt;/li&gt;
&lt;li&gt;2016-10 |  第五届全国社会媒体处理大会 | 用户画像技术测评 | &lt;sup&gt;5&lt;/sup&gt;&amp;frasl;&lt;sub&gt;373&lt;/sub&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;工作履历&#34;&gt;工作履历&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;2018.07~至今 网易游戏 &lt;a href=&#34;https://kuhungio.me/2019/what-is-data-mining/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;数据挖掘&lt;/a&gt;工程师&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;工作方向&#34;&gt;工作方向&lt;/h2&gt;

&lt;p&gt;数据挖掘工程师，机器学习方向。从事数据平台建设和机器学习应用项目开发。包括数据应用开发、数据建模等。赋能游戏运营。&lt;/p&gt;

&lt;h2 id=&#34;兴趣方向&#34;&gt;兴趣方向&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Docker、AutoML 、数据可视化&lt;/li&gt;
&lt;li&gt;机器视觉、自然语言处理、计算广告&lt;/li&gt;
&lt;li&gt;经济学、项目管理、科幻小说&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;微信关注&#34;&gt;微信关注&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://kuhungio.me/images/me/wechat.jpg&#34; alt=&#34;扫码关注公众号&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>速查表 | Linear Algebra and Calculus 线代与微积分</title>
      <link>https://kuhungio.me/2018/algebra-calculus/</link>
      <pubDate>Thu, 18 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kuhungio.me/2018/algebra-calculus/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://kuhungio.me/images/cheatsheets/algebra-calculus-1.png&#34; alt=&#34;线代与微积分速查表·一&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kuhungio.me/images/cheatsheets/algebra-calculus-2.png&#34; alt=&#34;线代与微积分速查表·二&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>速查表 | Probabilities Statistics 数理统计</title>
      <link>https://kuhungio.me/2018/probabilities-statistics/</link>
      <pubDate>Thu, 18 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kuhungio.me/2018/probabilities-statistics/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://kuhungio.me/images/cheatsheets/probabilities-statistics-1.png&#34; alt=&#34;数理统计速查表·一&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kuhungio.me/images/cheatsheets/probabilities-statistics-2.png&#34; alt=&#34;数理统计速查表·二&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kuhungio.me/images/cheatsheets/probabilities-statistics-3.png&#34; alt=&#34;数理统计速查表·三&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why is Data Hard 为啥说做数据这行不容易</title>
      <link>https://kuhungio.me/2018/why-is-data-hard/</link>
      <pubDate>Fri, 30 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kuhungio.me/2018/why-is-data-hard/</guid>
      <description>

&lt;p&gt;原文链接 &lt;a href=&#34;https://medium.com/@HelenLeeKupp/why-is-data-hard-3ed96ec70f3f&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Slack 工程师 : why-is-data-hard?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;做数据挖掘时，常常需要考虑很多方面。其中一个方面，常常会涉及到跨功能，复杂且琐碎的一些事项。数据准备以及评价指标的制定，就是这些事项之一。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;等等，似乎干数据这一行，并不容易？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;当大多数的组织谈到数据时，他们想的其实是指标——能反应近期业务、或是能够提供数据驱动的决策、抑或是能够监测企业经营状况的指标。&lt;/p&gt;

&lt;p&gt;按上面的说法，我们应该能够招聘到聪明且能干的分析师，做出酷炫的可视化仪表盘，并马上投入使用。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Every second of every day, our senses bring in way [more] data than we can possibly process in our brains.”&amp;ndash; Peter Diamandis, Founder of the X-Prize&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;拥有大量的数据并不会立马产生价值。当你是在数据增长快如 Slack 这样的公司处理数据时，不仅怎样驾驭数据和指标极其重要且困难的，更困难的是你像是在 “building the plane as it is flying”。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&#34;数据金字塔-评价指标-metrics-最为重要&#34;&gt;数据金字塔：评价指标（metrics）最为重要&lt;/h2&gt;

&lt;p&gt;数据金子塔大致可以分为4个级别。每一个级别都高度依赖下一级。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kuhungio.me/images/why-is-data-hard/image.png&#34; alt=&#34;数据金字塔&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;见解-洞察-insights&#34;&gt;见解/洞察（Insights）&lt;/h4&gt;

&lt;p&gt;大部分的老板和公司董事关心的是这一层。见解（Insights）是我们所讲的关于数据的故事，即什么驱动了商业，或者是有什么新的机会能够推动大量的增长。&lt;/p&gt;

&lt;p&gt;在理想的世界中，有一个共享的、不断演进的关于业务性能的数据叙述。这种数据叙述在整个组织中传播，以建立对业务的共同理解。&lt;/p&gt;

&lt;h4 id=&#34;探索以及工具&#34;&gt;探索以及工具&lt;/h4&gt;

&lt;p&gt;为了获得见解，我们需要雇佣很多人定期去探索数据。只有当有人在盯着数据的时候，才能有策划和故事!&lt;/p&gt;

&lt;p&gt;在快速增长的业务中，最优的数据探索涉及到一些关键事物：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;数据探查的多样性。&lt;/strong&gt;要真正建立起，对正在发生的事情和重要的事情的理解和见解，我们需要每个人都拥有，对数据的关注和探索的主人翁意识。现实情况是，如果探索困难，只有管理员(分析师)能够完成这项工作。你要么雇佣更多的分析师来深入挖掘你的见解，或者，你可以找到简化数据访问的方法，让团队能够自行解决问题。Slack 的做法介于两者之间——我们不断寻找，在整个组织中增加自助数据服务的方法；同时也确保，我们有优秀的分析师参与到每一个核心功能来。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;频繁使用。&lt;/strong&gt;像所有良好习惯的养成一样，查看数据和指标的一致性，是建立对所期望东西见解的唯一方法，什么样的结果是出乎意料的，什么样的问题是需要分析数据的。分析师可以帮助挖掘趋势，有些趋势值得挖掘，而许多趋势则不然。如果老板经常查看数据，那么你的分析师就更有可能对他们的精力，进行最优配置。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;例子：&lt;/strong&gt;本周活跃用户增加了4%。这是好是坏？是预期的增长放缓?还是因为这周，我们推出了新产品，所以实际上我们希望的是，高于平时一周的增长?&lt;/p&gt;

&lt;p&gt;分析师能够挖掘并做出各种比较，以帮助老板对数字进行说明。分析人士可以将该数字与往年做比较，深入了解这些新要素的组成，以及他们来自哪里。也许4%符合你的期望。但事实上，它比平时要低，我们没有推出任何新产品，且处于一个缓增长放缓期。这就是您希望董事会和分析人员构建的见解。你不会希望在某些事情上耗费精力，这些事情并不会带来业务的增长，或者改变我们的决策。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;发现能力与数据探索。&lt;/strong&gt;数据探索不同于在仪表盘上点来点去，这是我想在这里指出的。仪表盘是用一组具体的需求创建的，通常在特定的粒度级别上报告指标或世界的某些视图。数据探索是一种能力，即通过各种不同的特征结合来调查指标，以确定在固定的仪表盘中不会立即出现的趋势或机会。可以将其考虑为，能够对数据进行转换和筛选，从而向监控之外的数据提出问题的能力。看到活跃用户的激增吗？太棒了！也许我们需要探究这在所有国家都这样，还是仅仅出现在英国。那周我们是否发起了一项针对英国的营销行动？销售团队是不是在那周完成了一个大单子?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;企业主离数据越近，他们就越有能力着手进行自助服务的探索，就能发现更快捷、更有效的关键见解。这是因为，他们更有能力将我们在业务中所做的事情，与我们在数据中可能表现的特点结合起来。反之亦然！那些从商业伙伴那里拥有大量业务背景的分析人士，可以更快地找到正确的见解，而不是身陷各种假设之中。对于一个快速成长的组织来说，你可能希望两者都存在于你的组织中，这样每个人都能带着主人翁意识，理解我们最大的机遇和存在的差距。&lt;/p&gt;

&lt;h4 id=&#34;指标和维度&#34;&gt;指标和维度&lt;/h4&gt;

&lt;p&gt;在探索和工具层面，有很多数据驱动的决策。但我们在 Slack 发现，如果数据不容易理解、不清晰或是不可信，即使工具各种各样，也无法进行更广泛的数据挖掘。这是为什么，一致性、被充分理解的、明确定义的指标和维度是如此重要。&lt;/p&gt;

&lt;p&gt;由于各种原因，数据可能不可信；或是不可获得（没有权限）；也可能数据是错误的（数据丢失或是跟踪出了问题）；再或者是不清楚数据代表什么以及如何使用它。在这种情况下，数据本身的完整性就不那么重要了。更需要关心的是，数据使用者在能够进行挖掘之前，需要花多少时间来检查和测试他们的工作。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;例子：&lt;/strong&gt;在 Slack 公司，我们有两种不同的地理定位方式。如果你想了解用户数据，了解我们的国际活动和产品发布是如何进行的，或者寻找更多的机会让我们的业绩更上一层楼，那么地理位置是很重要的。&lt;/p&gt;

&lt;p&gt;我们的地理定义有两种：一由团队和用户的IP地址（他们使用 Slack 的地址），二是由团队的账单地址（通常是公司总部）来定义的。&lt;/p&gt;

&lt;p&gt;对于以上两种方法，我们都有充分理由。当我们考虑产品特性和发布时，我们真正关心的是产品实际使用的地方。基于 ip 的位置绝对是我们想要看到的。另一方面，对于财务报告和衡量我们的收入来源，我们则希望通过账单地址来理解数据。&lt;/p&gt;

&lt;p&gt;但是，我们的新用户在数据上可能会感到疑惑。先是会对使用哪个版本的位置信息感到困惑，再者是在使用一个版本，会看到不同版本的报告、并且数字不匹配。无论哪种情况，这个新用户都会对你的数据挖掘能力产生怀疑，或者对数据本身失去信任。&lt;/p&gt;

&lt;p&gt;解决这个问题的方式有很多。通常，最有效、最简单的解决方案不是技术上的。对于我们来说，我们对每个指标或维度，都进行了更清晰的解释和标注。我们对公司进行了培训，指导他们在什么情况下，使用哪种指标。这是分析团队在和客户合作时的主要工作。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在整个公司中，重要的是要非常清楚地了解，业务的关键指标和维度是什么，以及这些指标和维度是如何定义的。这些对普通的数据使用者来说是显而易见的吗？通过文档、培训和打标签，我们能更容易理解吗？我们是否在使用和讨论，我们团队中达成共识的度量标准和维度?&lt;/p&gt;

&lt;p&gt;我们现在还在做很多这样的工作，因为有很多方法可以让组织更好地进行迭代，使我们做得更棒。更重要的是，你在继续成长，更多的新人加入团队，并推出由你主导的新产品！&lt;/p&gt;

&lt;h4 id=&#34;基础设施&#34;&gt;基础设施&lt;/h4&gt;

&lt;p&gt;在所有这些基础之下的是数据基础设施，使上面的一切能够稳定、可靠，甚至在 100 倍的尺度范围内都可以访问。数据基础设施是连接所有产品的管道，它输出了我们需要了解整个组织中，正在发生事情的原始信息。一旦拥有了作为业务监视、探索和驱动见解所需的指标、维度和定义，你就需要确保实际上收集了原始数据，以便在产品的任何地方支持这些指标和维度。&lt;/p&gt;

&lt;p&gt;在一个看似简单的指标下，基础设施通常包括:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;仪表盘:&lt;/strong&gt; 产品的原始数据收集。这些数据收集通常是通过产品团队和数据工程团队的同事来完成的。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;聚合&lt;/strong&gt;: 原始数据需要聚合成一个干净、一致、可信的形式。这通常是由数据工程团队实现，其中有一些来自分析团队的贡献。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;指标逻辑:&lt;/strong&gt; 最后，在聚合数据的顶部，应用指标逻辑来生成业务指标。这再次是数据工程团队和数据分析团队之间的协作；通常，主要来自于分析方面。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;​&lt;/p&gt;

&lt;p&gt;没有基础设施，就没有数据可看。在某些情况下，随着数据需求的发展，你必须添加新的工具。如果你发布了一个新产品特性，并想要衡量是否采用该特性，该怎么办？是否有数据采集，可以捕获你想了解的，关于是否采用的信息？我们是否能够将这些数据，聚合在一个可以用于测量和见解的水平上？基础设施是实现这一切的生命线。​&lt;/p&gt;

&lt;h4 id=&#34;数据反馈&#34;&gt;数据反馈&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;https://kuhungio.me/images/why-is-data-hard/image_2.png&#34; alt=&#34;数据金字塔的循环&#34; /&gt;&lt;/p&gt;

&lt;p&gt;在这4个层次中，成功的数据和洞见来自于&lt;strong&gt;不断的反馈&lt;/strong&gt;以及和后台工程师之间的密切关系，数据的终端用户，以及介于两者之间的人。这些总是需要不断地迭代和反馈。随着公司的变化，快速增长，以及不断地寻找增长点，这一点变得更加重要。&lt;/p&gt;

&lt;h4 id=&#34;快速增长-产品增速超过数据&#34;&gt;快速增长: 产品增速超过数据&lt;/h4&gt;

&lt;p&gt;在实际中，做数据并不容易，因为它涉及很多跨职能的团队，而且很多公司的大多数人都没有意识到，需要实现“底层”工作。见解只是冰山的一角。&lt;/p&gt;

&lt;p&gt;每个快速增长公司的需求，都会超过其数据能力。是什么样子的呢?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;市场营销活动的复杂性增加。启动一个销售团队，或是通过新的供应商进行新的营销活动。系统被引入来支持这些团队，但不能在数据上有明确的暴露。​&lt;/li&gt;
&lt;li&gt;增加产品特性，或仅仅增加产品线。推出一个新的企业产品。国际化。​&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果没有基础设施来收集所有相关的数据，或者如果有太多的系统不能相互通信，不能建立可靠的数据集，那么你就会&lt;strong&gt;陷入数据泥沼&lt;/strong&gt;。当团队快速发展，并专注于实现目标时，这并不少见。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;那么，你该如何脱离泥沼？或者，为什么要涉及策略？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;记住数据金字塔。与一般的企业主所理解的相比，需要更多的依赖性和基础性的工作。摆脱泥沼，需要去做更多基础性的工作。对于一般的数据项目来说，这意味着公司的培训和支出是工作的重要部分。看起来就像:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;深入了解情况，与团队沟通公司的现状以及我们所处的环境。​&lt;/li&gt;
&lt;li&gt;在12-18个月的时间里，为数据策略构建一个远期规划，并制定一个计划，明确达到目标，所需的资源和时间。​&lt;/li&gt;
&lt;li&gt;让所有的数据团队按上面的做，并创建一个论坛，以便继续处理这些跨组织的项目和专项任务，这样才能实现全局的最优（我们喜欢称之为 #data- XFN）。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;说起来容易做起来难！但是，我们已经知道：干数据这一行并不容易。但从更大的尺度来讲，正确地处理数据，将使更多的团队能够理解业务并做出正确的决策。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>时序小结 | time series problem summary 时间序列问题处理</title>
      <link>https://kuhungio.me/2018/time-series-problem-summary/</link>
      <pubDate>Thu, 08 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kuhungio.me/2018/time-series-problem-summary/</guid>
      <description>

&lt;p&gt;Source &lt;a href=&#34;https://www.kaggle.com/c/recruit-restaurant-visitor-forecasting/discussion&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://www.kaggle.com/c/recruit-restaurant-visitor-forecasting/discussion&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;总结一-保证数据同分布&#34;&gt;总结一：保证数据同分布&lt;/h3&gt;

&lt;p&gt;验证集的选取，分布上应尽量靠近测试集。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;方式一:：对抗验证集的生成。&lt;/li&gt;
&lt;li&gt;方式二： 就近选取相同天数。&lt;/li&gt;
&lt;li&gt;方式三:：类比属性。如本赛题 &amp;ldquo;golden week&amp;rdquo; 与 &amp;ldquo;new year&amp;rdquo; 类比，选取 &amp;ldquo;new year&amp;rdquo; 段作为验证集。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;tips: &lt;strong&gt;kfold 用在时间序列上不合适，会有数据泄露风险。正确的方法应是滑窗。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;总结二-异常值特殊处理&#34;&gt;总结二：异常值特殊处理&lt;/h3&gt;

&lt;p&gt;一些特殊的时间节点（或者说是异常值），应该予以特殊考虑。比如本次比赛中的 &amp;ldquo;golden week&amp;rdquo;.。需要对其进行变换，而不是直接依靠模型的预测结果。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;ul&gt;
&lt;li&gt;方式一:：等同法&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;The rules:&lt;/p&gt;

&lt;p&gt;Treat holiday as Saturday&lt;/p&gt;

&lt;p&gt;If the day before holiday is weekday ,treat the day before holiday as Friday
If the day after holiday is weekday ,treat the day after holiday as Monday
it work not only golden week but also a lot other holidays.&lt;/p&gt;

&lt;p&gt;So the trick is from careful EDA and CV rather than luck&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;方式二:：标记法&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;days-from-holiday or days-to-holiday
or
0/1 flags whether the previous/next day and second-to-last/next-but-one day is a holiday.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;#Source https://github.com/MaxHalford/kaggle-recruit-restaurant/blob/master/Solution.ipynb

date_info = pd.read_csv(&#39;data/kaggle/date_info.csv&#39;)
date_info.rename(columns={&#39;holiday_flg&#39;: &#39;is_holiday&#39;, &#39;calendar_date&#39;: &#39;visit_date&#39;}, inplace=True)
date_info[&#39;prev_day_is_holiday&#39;] = date_info[&#39;is_holiday&#39;].shift().fillna(0)
date_info[&#39;next_day_is_holiday&#39;] = date_info[&#39;is_holiday&#39;].shift(-1).fillna(0)

date_info.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;总结三-特征构造靠倒推&#34;&gt;总结三：特征构造靠倒推&lt;/h3&gt;

&lt;p&gt;时间序列的特征生成，还是多靠 lagging 往前推的手法。&lt;/p&gt;

&lt;p&gt;Source &lt;a href=&#34;https://www.kaggle.com/c/recruit-restaurant-visitor-forecasting/discussion/49174&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://www.kaggle.com/c/recruit-restaurant-visitor-forecasting/discussion/49174&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;lagging visitors features 1-14 (by &amp;lsquo;air_store_id&amp;rsquo; and by dayOfWeek), lagging visitors features 1-14 (by &amp;lsquo;air_store_id&amp;rsquo; only), the lagging-difference visitors features 1-13, the lagging-difference-delta4 visitors features 1-10, WeightedMovingAverage for the lagging lagging visitors features, mean/median/min/max/(percentile10,30,70,90)/sum/count visitor stats features for past 14 days, 28 days, 60 days, 90 days, 120 days, 180 days, 364 days (by &amp;lsquo;air_store_id&amp;rsquo; and by dayOfWeek), mean/median/min/max/(percentile10,30,70,90)/sum/count visitor stats features for past 14 days, 28 days, 60 days, 90 days, 120 days, 180 days, 364 days (by &amp;lsquo;air_store_id&amp;rsquo; only).
or
mean weekly visitors up to lag 20 and for mean monthly visitors up to lag 8 or so&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;总结四-独立建模&#34;&gt;总结四：独立建模&lt;/h3&gt;

&lt;p&gt;模型训练。时间序列问题，一般是预测未来一段时间的情况。针对总结三中的特征生成方法，为避免过拟合，宜采用每天分开建模的方法。原因在于：靠后的时间，其特征依赖前面的预测结果来生成。&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;个人感想&#34;&gt;个人感想&lt;/h4&gt;

&lt;p&gt;取得好效果，大多数时间靠的不是复杂的模型、不是复杂的CV方式，而是&lt;strong&gt;对数据的观察&lt;/strong&gt;（如： holiday trick 加公开的 kernel， 就可以取得银牌的成绩）以及&lt;strong&gt;特征构造方面的实践&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Top solutions are rather simple.&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Single Shot MultiBox Detector Keras version</title>
      <link>https://kuhungio.me/2017/ssd/</link>
      <pubDate>Fri, 08 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kuhungio.me/2017/ssd/</guid>
      <description>

&lt;h1 id=&#34;ssd目标检测keras版&#34;&gt;SSD目标检测Keras版&lt;/h1&gt;

&lt;p&gt;SSD是一种Object Detection方法。本文是基于论文&lt;a href=&#34;http://arxiv.org/abs/1512.02325&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;SSD: Single Shot MultiBox Detector&lt;/a&gt;，实现的keras版本。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;该文章在既保证速度，又要保证精度的情况下，提出了SSD物体检测模型，与现在流行的检测模型一样，将检测过程整个成一个single deep neural network。便于训练与优化，同时提高检测速度。
SSD将输出一系列离散化（discretization）的bounding boxes，这些bounding boxes是在不同层次（layers）上的feature maps上生成的，并且有着不同的aspect ratio。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;模型效果&#34;&gt;模型效果&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;模型对载具的检测
&lt;p align=&#34;center&#34;&gt;
&lt;img src=&#34;https://github.com/kuhung/SSD_keras/raw/master/output/Aeroplane.png&#34; height=&#34;300&#34;&gt;
&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p align=&#34;center&#34;&gt;
&lt;img src=&#34;https://github.com/kuhung/SSD_keras/raw/master/output/Bicycle.png&#34; height=&#34;300&#34;&gt;
&lt;/p&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;模型对动物的检测
&lt;p align=&#34;center&#34;&gt;
&lt;img src=&#34;https://github.com/kuhung/SSD_keras/raw/master/output/Dog.png&#34; height=&#34;300&#34;&gt;
&lt;img src=&#34;https://github.com/kuhung/SSD_keras/raw/master/output/Cat.png&#34; height=&#34;300&#34;&gt;
&lt;/p&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;模型的视频检测
&lt;p align=&#34;center&#34;&gt;
&lt;img src=&#34;https://github.com/kuhung/SSD_keras/raw/master/output/car.gif&#34;&gt;
&lt;/p&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;如何使用&#34;&gt;如何使用&lt;/h2&gt;

&lt;p&gt;项目地址&lt;a href=&#34;https://github.com/kuhung/SSD_keras&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;kuhung/SSD_keras&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;所需依赖&#34;&gt;所需依赖&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cv2==3.3.0
keras==1.2.2
matplotlib==2.1.0
tensorflow==1.3.0
numpy==1.13.3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果想跑通视频模块，则需额外&lt;code&gt;pip install scikit-video&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;具体操作&#34;&gt;具体操作&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone git@github.com:kuhung/SSD_keras.git
cd SSD_keras
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Download model weight &lt;code&gt;weights_SSD300.hdf5&lt;/code&gt;&lt;a href=&#34;https://github.com/kuhung/SSD_keras/releases&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cp weights_SSD300.hdf5 into SSD_keras
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;对于图片的检测&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;参考SSD.ipynb&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;若要剪切图片为下一步处理做准备&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;参考SSD_crop.py&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;检测视频
&lt;code&gt;bash
cd video_utils
python videotest_example.py hy.mp4
&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;参考资料&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://arxiv.org/abs/1512.02325&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;SSD: Single Shot MultiBox Detector&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.csdn.net/u010167269/article/details/52563573&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;论文阅读：SSD: Single Shot MultiBox Detector&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/rykov8/ssd_keras&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;rykov8/ssd_keras&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>yysGAN 生成对抗网络，在游戏角色生成中的尝试</title>
      <link>https://kuhungio.me/2017/yysgan/</link>
      <pubDate>Tue, 21 Nov 2017 09:02:35 +0800</pubDate>
      
      <guid>https://kuhungio.me/2017/yysgan/</guid>
      <description>

&lt;h1 id=&#34;使用gan生成新的游戏角色&#34;&gt;使用GAN生成新的游戏角色&lt;/h1&gt;

&lt;h2 id=&#34;摘要&#34;&gt;摘要&lt;/h2&gt;

&lt;p&gt;Generative Adversarial Networks（简称GAN），中文名叫生成对抗网络。我们将使用它，来生成新的阴阳师角色。
&lt;img src=&#34;http://ww2.sinaimg.cn/large/006r3PQBjw1fd4qrdkq2fj305k074jrk.jpg&#34; alt=&#34;image1&#34; /&gt;&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&#34;依赖-pip-install&#34;&gt;依赖 （pip install）&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;cv2
tensorflow( &amp;gt;=1.0)
scipy
numpy
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;使用方法&#34;&gt;使用方法&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;cd yysGAN
python yysGAN.py
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;5000次迭代训练结果&#34;&gt;5000次迭代训练结果&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/kuhung/yysGAN/raw/master/output/epoch4950.jpg&#34; alt=&#34;image2&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;了解更多gan的知识&#34;&gt;了解更多GAN的知识&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/kuhung/yysGAN/blob/master/Generative%20Adversarial%20Networks.ipynb&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Generative Adversarial Networks.ipynb&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/bo-ToTdhgew&#34; frameborder=&#34;0&#34; gesture=&#34;media&#34; allow=&#34;encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/yz6dNf7X7SA&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Siraj Raval&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/moxiegushi/pokeGAN&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;moxiegushi/pokeGAN&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;项目地址&#34;&gt;项目地址&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/kuhung/yysGAN&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://github.com/kuhung/yysGAN&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;定制你的gan图片生成器&#34;&gt;定制你的GAN图片生成器&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;# 拆包即用，修改input下文件，改为对应的jpg素材即可。
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>